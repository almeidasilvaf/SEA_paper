[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Soybean Expression Atlas v2: code and data",
    "section": "",
    "text": "Preface\nThis repository contains code and data used in the paper The Soybean Expression Atlas v2: a comprehensive database of over 5000 RNA-seq samples.\n\nABSTRACT\nSoybean is a crucial crop worldwide, used as a source of food, feed, and industrial products due to its high protein and oil content. Previously, the rapid accumulation of soybean RNA-seq data in public databases and the computational challenges of processing raw RNA-seq data motivated us to develop the Soybean Expression Atlas, a gene expression database of over a thousand RNA-seq samples. Over the past few years, our database has allowed researchers to explore the expression profiles of important gene families, discover genes associated with agronomic traits, and understand the transcriptional dynamic of cellular processes. Here, we present the Soybean Expression Atlas v2, an updated version of our database with a 4-fold increase in the number of samples, featuring transcript- and gene-level transcript abundance matrices for 5481 publicly available RNA-seq samples. New features in our database include the availability of transcript-level abundance estimates and equivalence classes to explore differential transcript usage, abundance estimates in bias-corrected counts to increase the accuracy of differential gene expression analyses, a new web interface with improved data visualization and user experience, and a reproducible and scalable pipeline available as an R package. The Soybean Expression Atlas v2 is available at https://soyatlas.venanciogroup.uenf.br/, and it will accelerate soybean research, empowering researchers with high-quality and easily accessible gene expression data.\nKeywords: transcriptomics, bioinformatics, gene expression, integrative biology.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/01_creating_the_SEA_v2.html",
    "href": "chapters/01_creating_the_SEA_v2.html",
    "title": "1  Creating the Soybean Expression Atlas v2",
    "section": "",
    "text": "1.1 Downloading data\nHere, I will describe the code I used to create the Soybean Expression Atlas using the R package bears.\nWe will download samples that have not been downloaded yet. The data frames with sample metadata are stored in the data/ directory.\noptions(timeout = 1e+10)\n\n#----Get sample metadata--------------------------------------------------------\nterm &lt;- \"Glycine max[ORGN] AND RNA-seq[STRA]\"\nmetadata_all &lt;- create_sample_info(term, retmax = 10000)\n\n# Remove unsupported technologies\nmetadata_all &lt;- metadata_all[!grepl(\n    \"454|SOLiD|PacBio|Torrent|AB 310|Complete Genomics|ION\", \n    metadata_all$Instrument\n), ]\n\n## Save metadata object\nsave(\n    metadata_all,\n    file = here(\"data\", \"metadata_all.rda\"),\n    compress = \"xz\"\n)\n\n## Create directory structure\nrootdir &lt;- here(\"results\")\nds &lt;- create_dir_structure(rootdir = rootdir)\nsave(ds, file = here(\"data\", \"ds.rda\"), compress = \"xz\")\n\n#----Downloading samples----------------------------------------------------\nurls &lt;- get_url_ena(metadata_all)\ndownload &lt;- download_from_ena(urls = urls, fastqdir = ds$fastqdir)\nNow, let’s check the file integrity of downloaded files. Here, I will do it for the whole atlas, including previous versions, just as a sanity check.\n#----Check file integrity with md5sum check-------------------------------------\n\n# Remove runs that were not downloaded\ndownloaded &lt;- fastq_exists(metadata_all, fastqdir = ds$fastqdir)\ndownloaded &lt;- downloaded$Run[!is.na(downloaded$Status)]\nmetadata_atlas_v2 &lt;- metadata_all[metadata_all$Run %in% downloaded, ]\n\n## Check md5sum\nintegrity &lt;- check_md5(\n    run_accessions = metadata_all$Run, \n    fastqdir = ds$fastqdir\n)\n\nfailed_corrupt &lt;- integrity[integrity$Status == FALSE, \"Run\"]\nfailed_corrupt &lt;- unique(as.character(failed_corrupt))\nThe failed_corrupt object is a character vector containing run accessions that failed the integrity check and, thus, must be re-downloaded. Now, let’s also check for files that were not downloaded at all. Here, we will only consider for re-download runs that are part of BioProjects with effectively downloaded runs. In other words, if all runs of a BioProject were not downloaded, I will ignore them (they are probably not available on EBI).\n# Get download status\ndstatus &lt;- fastq_exists(metadata_all, fastqdir = ds$fastqdir)\n\n# Get BioProject info of failed runs\nfailed_bioproject &lt;- dstatus %&gt;%\n    full_join(., metadata_all)\n\n# Get BioProjects with missing percentage (m) = 0 &lt; m &lt; 100\nbioprojects_download &lt;- failed_bioproject %&gt;%\n    group_by(BioProject) %&gt;%\n    summarise(perc = sum(is.na(Status)) / length(BioProject)) %&gt;%\n    filter(perc != 0 & perc != 1)\n\n\n# Get vector of runs from these BioProjects to re-download\nfailed_nd &lt;- failed_bioproject %&gt;%\n    filter(is.na(Status) & BioProject %in% bioprojects_download$BioProject) %&gt;%\n    select(Run)\n\nfailed_nd &lt;- unique(as.character(failed_nd$Run))\nIn the end, 33 runs failed the integrity check (i.e., they were downloaded, but md5sums were different from the reference), and 33 runs failed to download (i.e., some runs from the BioProject were downloaded, but others were not). Re-downloading failed runs:\n# Metadata data frame of failed runs only\ntodownload &lt;- c(failed_corrupt, failed_nd)\nmetadata_failed &lt;- metadata_all[metadata_all$Run %in% todownload, ]\n\n# Download again\nurls_missing &lt;- get_url_ena(metadata_failed)\n\noptions(timeout = 1e10)\ndownload_missing &lt;- download_from_ena(\n    metadata_failed,\n    urls = urls_missing, \n    fastqdir = ds$fastqdir\n)\nDone! Finally, let’s create a final metadata data frame with all samples we have:\ndstatus &lt;- fastq_exists(metadata_all, fastqdir = ds$fastqdir)\nok_runs &lt;- unique(dstatus$Run[dstatus$Status == \"OK\"])\n\nmetadata_atlas_v2 &lt;- metadata_all[metadata_all$Run %in% ok_runs, ]\n\n## Save a data frame containing metadata for all samples of SEA v2\nsave(\n    metadata_atlas_v2_downloaded,\n    file = here::here(\"data\", \"metadata_atlas_v2_downloaded.rda\"),\n    compress = \"xz\"\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating the Soybean Expression Atlas v2</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_the_SEA_v2.html#sequence-qc-and-filtering",
    "href": "chapters/01_creating_the_SEA_v2.html#sequence-qc-and-filtering",
    "title": "1  Creating the Soybean Expression Atlas v2",
    "section": "1.2 Sequence QC and filtering",
    "text": "1.2 Sequence QC and filtering\nNow, we will remove sequence adapters and low-quality bases with fastp.\n\nmetadata_atlas_v2 &lt;- metadata_atlas_v2_downloaded\n\nruns_fastp &lt;- fastq_exists(metadata_atlas_v2, ds$fastqdir) %&gt;%\n    dplyr::filter(!is.na(Status)) %&gt;%\n    dplyr::pull(Run)\n\nmetadata_fastp &lt;- metadata_atlas_v2[metadata_atlas_v2$Run %in% runs_fastp, ]\n\n# Run fastp\nfastp_status &lt;- trim_reads(\n    metadata_fastp, \n    fastqdir = ds$fastqdir, \n    filtdir = ds$filtdir,\n    qcdir = ds$qcdir,\n    threads = 16,\n    delete_raw = TRUE\n)\n\n# Get a metadata data frame with only reads that have undergone filtering\nfiltered_reads &lt;- unique(\n    gsub(\n        \"(\\\\.fastq.*)|(_.*)\", \"\", \n        basename(list.files(ds$filtdir, pattern = \"fastq.gz\"))\n    )\n)\n\nmetadata_atlas_v2_filtered &lt;- metadata_atlas_v2[\n    metadata_atlas_v2$Run %in% filtered_reads, \n]\n\nsave(\n    metadata_atlas_v2_filtered, compress = \"xz\",\n    file = here(\"data\", \"metadata_atlas_v2_filtered.rda\")\n)\n\nNow, let’s import and save read filtering stats.\n\n# Get a data frame of summary stats from fastp\nfastp_stats &lt;- summary_stats_fastp(ds$qcdir)\n\nsave(\n    fastp_stats, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"fastp_stats.rda\")\n)\n\nFinally, we will remove low-quality files based on the following criteria:\n\nMean length after filtering &lt; 40\nQ20 rate &lt;80% after filtering.\n\n\n# Remove files whose mean length after filtering is &lt;40 and Q20 &lt;80%\nkeep &lt;- fastp_stats %&gt;%\n    filter(after_meanlength &gt;= 40) %&gt;% \n    filter(after_q20rate &gt;= 0.8) %&gt;%\n    pull(Sample)\n\nfiltered_metadata &lt;- metadata_atlas_v2_filtered[\n    metadata_atlas_v2_filtered$Run %in% keep, \n]\nrownames(filtered_metadata) &lt;- 1:nrow(filtered_metadata)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating the Soybean Expression Atlas v2</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_the_SEA_v2.html#quantifying-transcript-abundance",
    "href": "chapters/01_creating_the_SEA_v2.html#quantifying-transcript-abundance",
    "title": "1  Creating the Soybean Expression Atlas v2",
    "section": "1.3 Quantifying transcript abundance",
    "text": "1.3 Quantifying transcript abundance\nNext, we will quantify transcript abundance with salmon. To do that, we first need to index the reference transcriptome.\n\n# Index transcriptome\ntranscriptome_path &lt;- here(\"data\", \"gmax_transcriptome.fa.gz\")\n\nidx_salmon &lt;- salmon_index(\n    salmonindex = ds$salmonindex,\n    transcriptome_path = transcriptome_path\n)\n\nidx_salmon\n\nThen, we can quantify transcript abundance.\n\n# Quantify transcript abundance\nquant_salmon &lt;- salmon_quantify(\n    filtered_metadata,\n    filtdir = ds$filtdir,\n    salmonindex = ds$salmonindex,\n    salmondir = ds$salmondir,\n    threads = 40\n)\n\n# Checking percentage of samples that ran sucessfully\nn_ok &lt;- nrow(quant_salmon[!is.na(quant_salmon$status), ])\nn_ok / nrow(quant_salmon)\n\nsalmon was run sucessfully for 100% of the samples. Great! Now, let’s obtain mapping rates for each BioSample to see whether or not we need to discard samples. Here, we will remove samples with mapping rate &lt;50% (i.e., less than 50% of the reads failed to “map”).\n\n# Get a data frame of mapping rate per BioSample\nbiosamples &lt;- unique(filtered_metadata$BioSample)\nmapping_rate &lt;- summary_stats_salmon(ds$salmondir, biosamples)\n\nsave(\n    mapping_rate, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"mapping_rate_salmon.rda\")\n)\n\n# Removing BioSamples with mapping rate &lt;50%\nbiosamples_to_keep &lt;- mapping_rate %&gt;%\n    filter(Mapping_rate &gt;= 50) %&gt;%\n    pull(BioSample)\n\n# Update metadata data frame to keep only samples that passed the filtering step\nfinal_metadata_atlas_v2 &lt;- filtered_metadata %&gt;%\n    filter(BioSample %in% biosamples_to_keep)\n\n82% of the samples (5481/6644) passed the filtering step (i.e., had mapping rates &gt;=50%). Thus, this is the final number of samples in the Soybean Expression Atlas v2.\nTo conclude, let’s just fix and standardize tissue names in the metadata data frame and save it.\n\nfinal_metadata_classified_tissues &lt;- final_metadata_atlas_v2 %&gt;% \n    mutate(Tissue_PO = str_to_lower(Tissue)) %&gt;%\n    mutate(Tissue_PO = str_replace_all(\n        Tissue_PO,\n        c(\".*nodule.*\" = \"nodule\",\n          \".*leaves and roots.*\" = \"whole plant\",\n          \".*leaves.*\" = \"leaf\",\n          \".*leaf.*\" = \"leaf\",\n          \".*trifoliate.*\" = \"leaf\",\n          \".*seed coat.*\" = \"seed coat\",\n          \".*crown.*\" = \"root\",\n          \".*shoot.*\" = \"shoot\",\n          \".*stem.*\" = \"shoot\",\n          \".*hypocotyl.*\" = \"hypocotyl\",\n          \".*pod.*\" = \"pod\",\n          \".*root.*\" = \"\",\n          \".*embryo.*\" = \"embryo\",\n          \".*seedling.*\" = \"seedling\",\n          \".*cytoledon.*\" = \"cotyledon\",\n          \".*cotyledon.*\" = \"cotyledon\",\n          \".*seed.*\" = \"seed\",\n          \".*flower.*\" = \"flower\",\n          \".*petiole.*\" = \"petiole\",\n          \".*meristem.*\" = \"meristem\",\n          \".*radicle*\" = \"radicle\",\n          \".*epicotyl.*\" = \"epicotyl\",\n          \".*whole.*\" = \"whole plant\",\n          \".*roots + leaves.*\" = \"whole plant\",\n          \".*sprout*\" = \"seedling\",\n          \".*ovule.*\" = \"flower\",\n          \".*suspensor*\" = \"suspensor\",\n          \".*floral.*\" = \"flower\",\n          \".*leaf bud.*\" = \"leaf\",\n          \".*anther*\" = \"flower\",\n          \".*stem and leaf*\" = \"whole plant\",\n          \".*ovary.*\" = \"flower\",\n          \".*embryo.*\" = \"embryo\",\n          \".*embryo.*\" = \"embryo\",\n          \".*embryo.*\" = \"embryo\"\n        )\n    )\n    )\n\nwrite_tsv(\n    final_metadata_classified_tissues, \n    file = here(\"products\", \"tables\", \"final_metadata_classified_tissues.tsv\")\n)\n\nThe file final_metadata_classified_tissues.tsv was manually edited to include classifications for missing tissues, and then it was renamed to final_metadata_classified_atlas_v2.tsv. This file only contains BioSample-level information (runs were not considered).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating the Soybean Expression Atlas v2</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_the_SEA_v2.html#session-information",
    "href": "chapters/01_creating_the_SEA_v2.html#session-information",
    "title": "1  Creating the Soybean Expression Atlas v2",
    "section": "Session information",
    "text": "Session information\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.3.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21    2023-03-26 [1] CRAN (R 4.3.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating the Soybean Expression Atlas v2</span>"
    ]
  },
  {
    "objectID": "chapters/02_analyzing_quantitative_data.html",
    "href": "chapters/02_analyzing_quantitative_data.html",
    "title": "2  Analyzing quantitative data",
    "section": "",
    "text": "2.1 From salmon quant.sf files to SummarizedExperiment\nHere, I will describe the code to:\nFirst of all, let’s load required packages and data.\nHere, we will obtain a SummarizedExperiment object containing gene-level transcript abundances in TPM and bias-corrected counts. Counts will be obtained using the “bias correction without an offset” method from the Bioconductor package tximport.\nTo create the SummarizedExperiment object, we will need a 2-column data frame of transcript-to-gene mapping. Let’s create it.\n# Create a data frame of transcript-to-gene mapping\ntx &lt;- Biostrings::readDNAStringSet(\n    here(\"data\", \"gmax_transcriptome.fa.gz\")\n)\ntx2gene &lt;- data.frame(\n    TXNAME = gsub(\" \\\\|.*\", \"\", names(tx)),\n    GENEID = gsub(\".*\\\\| \", \"\", names(tx))\n)\n\nsave(\n    tx2gene, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"tx2gene.rda\")\n)\nNow, we can get the SummarizedExperiment object.\n# Get gene-level transcript abundance estimates from salmon\n## \"Bias correction without an offset\" method\nse_atlas_gene &lt;- salmon2se(\n    final_metadata,\n    level = \"gene\",\n    salmondir = ds$salmondir,\n    tx2gene = tx2gene\n)\nassay(se_atlas_gene, \"gene_counts\") &lt;- round(\n    assay(se_atlas_gene, \"gene_counts\") \n)\n\n## \"Original counts and offset\" method\nfiles &lt;- file.path(ds$salmondir, final_metadata$BioSample, \"quant.sf\")\nse_atlas_gene_offset &lt;- tximport::tximport(\n    files, type = \"salmon\", tx2gene = tx2gene\n)\ncolnames(se_atlas_gene_offset$abundance) &lt;- final_metadata$BioSample\ncolnames(se_atlas_gene_offset$counts) &lt;- final_metadata$BioSample\ncolnames(se_atlas_gene_offset$length) &lt;- final_metadata$BioSample\n\n# Get transcript-level transcript abundance estimates from salmon\nse_atlas_transcript &lt;- salmon2se(\n    final_metadata,\n    level = \"transcript\",\n    salmondir = ds$salmondir\n)\n\n# Save gene-level and transcript-level\nsave(\n    se_atlas_gene, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_gene.rda\")\n)\n\nsave(\n    se_atlas_gene_offset, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_gene_offset.rda\")\n)\n\nsave(\n    se_atlas_transcript, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_transcript.rda\")\n)\n\n# Save final and complete sample metadata data frame\nsample_metadata_complete &lt;- as.data.frame(colData(se_atlas_gene))\n\nsave(\n    sample_metadata_complete, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"sample_metadata_complete.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Analyzing quantitative data</span>"
    ]
  },
  {
    "objectID": "chapters/02_analyzing_quantitative_data.html#dimensionality-reduction",
    "href": "chapters/02_analyzing_quantitative_data.html#dimensionality-reduction",
    "title": "2  Analyzing quantitative data",
    "section": "2.2 Dimensionality reduction",
    "text": "2.2 Dimensionality reduction\nNow, we will perform dimensionality reduction on highly variable genes with PCA, t-SNE, and UMAP. To increase speed and avoid noise, we will use the PCs computed with the PCA as input to t-SNE and UMAP.\n\n# Load SummarizedExperiment object containing counts per gene\nload(here(\"products\", \"result_files\", \"se_atlas_gene.rda\"))\n\n\n2.2.1 Feature selection\nTo maximize biological signal and reduce noise, we will only use highly variable genes for dimensionality reduction. Here, we will pick the top 5000 of genes with the highest biological components.\n\n# Create a SingleCellExperiment with counts and log-normalized counts\natlas_counts_sce &lt;- SingleCellExperiment(\n    assays = list(\n        counts = assay(se_atlas_gene, \"gene_counts\"),\n        logcounts = log2(assay(se_atlas_gene, \"gene_counts\") + 1)\n    ), \n    colData = colData(se_atlas_gene)\n)\n\n# Modeling the mean-variance relationship and visualizing the fit\nmean_var_model &lt;- modelGeneVar(atlas_counts_sce)\nfit_mean_var &lt;- metadata(mean_var_model)\n\np_fit_mean_var &lt;- data.frame(\n    mean = fit_mean_var$mean,\n    var = fit_mean_var$var,\n    trend = fit_mean_var$trend(fit_mean_var$mean)\n) |&gt;\n    ggplot(aes(x = mean, y = var)) +\n    geom_point(alpha = 0.4) +\n    geom_line(aes(y = trend), color = \"steelblue3\", linewidth = 1.5) +\n    labs(\n        title = \"Per-gene mean-variance relationship\",\n        subtitle = \"Counts were normalized by library size and log-transformed\",\n        x = \"Mean of log-expression\", y = \"Variance of log-expression\"\n    ) +\n    theme_minimal()\n\n\np_fit_mean_var\n\n\n\n\n\n\n\n\n\n# Extract the top 5000 of genes with the highest biological components\nhvg &lt;- getTopHVGs(mean_var_model, n = 5000)\n\nThe object hvg is a character vector containing the IDs of the top 5000 genes with the highest biological components.\n\n\n2.2.2 Principal components analysis (PCA)\nNow, we will perform PCA using the genes in hvg.\n\n# Perform PCA\natlas_counts_sce &lt;- fixedPCA(\n    atlas_counts_sce, subset.row = hvg\n)\n\n# Plot proportion of variance explained by each PC\npercent_var &lt;- attr(reducedDim(atlas_counts_sce), \"percentVar\")\n\np_pca_percent_var &lt;- data.frame(\n    Variance = round(percent_var, 2),\n    PC = factor(1:50, levels = 1:50)\n) |&gt;\n    ggplot(aes(x = PC, y = Variance)) +\n    geom_col(fill = \"grey40\") +\n    geom_text(aes(label = Variance), hjust = -0.3) +\n    labs(\n        title = \"Proportion of variance explained by each PC\",\n        x = \"PC\", y = \"Variance explained (%)\"\n    ) +\n    coord_flip() +\n    theme_minimal() +\n    ylim(0, 60)\n\n\np_pca_percent_var\n\n\n\n\n\n\n\n\nBased on the plot, we will use only the top 8 PCs for t-SNE and UMAP.\n\n\n2.2.3 t-stochastic neighbor embedding (t-SNE)\nNow, we will perform dimensionality reduction with t-SNE using the top 8 PCs obtained previously. We will first test running a t-SNE with 6 different perplexity values: 10, 20, 30, 40, 50, 60. Then, we will select the best.\n\n# Get and plot t-SNE coordinates (perplexity = 10, 20, 30, 40, 50)\nperplexities &lt;- c(10, 20, 30, 40, 50, 60)\np_tsne &lt;- lapply(perplexities, function(x) {\n    \n    tsne_coord &lt;- runTSNE(\n        atlas_counts_sce, perplexity = x,\n        dimred = \"PCA\", n_dimred = 8\n    )\n    \n    # Color by the variable \"Part\"\n    p &lt;- plotReducedDim(tsne_coord, dimred = \"TSNE\", colour_by = \"Part\") +\n        labs(\n            x = \"t-SNE 1\", y = \"t-SNE 2\",\n            title = paste0(\"Perplexity = \", x)\n        )\n    \n    return(p)\n})\n\n# Visualize all plots\np_tsne_all_perplexities_panel &lt;- wrap_plots(p_tsne, nrow = 2) +\n    plot_layout(guides = \"collect\") &\n    ggsci::scale_color_d3(\"category20\") &\n    labs(color = \"Part\")\n\n\np_tsne_all_perplexities_panel\n\n\n\n\n\n\n\n\nBased on the plots, we chose perplexity = 60 as the best option. Now, let’s create an object containing only the plot for this perplexity value and give it a better title.\n\n# Plot t-SNE with perplexity = 60\np_tsne_optimal_perplexity &lt;- p_tsne_all_perplexities_panel[[6]] +\n    labs(\n        title = \"t-SNE plot of all samples in the SEA 2.0\",\n        subtitle = \"Coordinates were constructed from the top 8 principal components, with perplexity = 60\"\n    )\n\n\np_tsne_optimal_perplexity\n\n\n\n\n\n\n\n\n\n\n2.2.4 Uniform manifold approximation and projection (UMAP)\nLastly, we will perform dimensionality reduction with UMAP using the top 8 PCs identified before. Similarly to what we did for t-SNE, we will run UMAP with 6 different values for the “number of neighbors” parameter: 10, 20, 30, 40, 50, and 60. Then, we will look at each plot to choose the best.\n\n# Run UMAP with n_neighbors = 10, 20, 30, 40, 50\nn_neighbors &lt;- c(10, 20, 30, 40, 50, 60)\np_umap &lt;- lapply(n_neighbors, function(x) {\n    \n    umap_coord &lt;- runUMAP(\n        atlas_counts_sce, n_neighbors = x,\n        dimred = \"PCA\", n_dimred = 8\n    )\n    \n    # Color by the variable \"Part\"\n    p &lt;- plotReducedDim(umap_coord, dimred = \"UMAP\", colour_by = \"Part\") +\n        labs(\n            x = \"UMAP 1\", y = \"UMAP 2\",\n            title = paste0(\"Number of nearest neighbors = \", x)\n        )\n    \n    return(p)\n})\n\n# Visualize all plots\np_umap_all_nneighbors_panel &lt;- wrap_plots(p_umap, nrow = 2) +\n    plot_layout(guides = \"collect\") &\n    ggsci::scale_color_d3(\"category20\") &\n    labs(color = \"Part\")\n\n\np_umap_all_nneighbors_panel\n\n\n\n\n\n\n\n\nBased on the plots, we chose n_neighbors = 30 as the best option. Now, let’s create an object containing the final plot.\n\n# Plot UMAP with n_neighbors = 30\np_umap_optimal_nneighbors &lt;- p_umap_all_nneighbors_panel[[3]] +\n    labs(\n        title = \"UMAP plot of all samples in the SEA 2.0\",\n        subtitle = \"Coordinates were constructed from the top 8 principal components, with n_neighbors = 30\"\n    )\n\n\np_umap_optimal_nneighbors",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Analyzing quantitative data</span>"
    ]
  },
  {
    "objectID": "chapters/02_analyzing_quantitative_data.html#session-info",
    "href": "chapters/02_analyzing_quantitative_data.html#session-info",
    "title": "2  Analyzing quantitative data",
    "section": "Session info",
    "text": "Session info\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n AnnotationDbi        * 1.62.0    2023-04-25 [1] Bioconductor\n beachmat               2.16.0    2023-04-25 [1] Bioconductor\n bears                * 0.99.0    2023-06-23 [1] Github (almeidasilvaf/bears@2dbba3d)\n beeswarm               0.4.0     2021-06-01 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocFileCache          2.8.0     2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocIO                 1.10.0    2023-04-25 [1] Bioconductor\n BiocNeighbors          1.18.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocSingular           1.16.0    2023-04-25 [1] Bioconductor\n biomaRt                2.56.0    2023-04-25 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n bluster                1.10.0    2023-04-25 [1] Bioconductor\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n dbplyr                 2.3.2     2023-03-21 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n DelayedMatrixStats     1.22.1    2023-06-09 [1] Bioconductor\n DESeq2               * 1.40.1    2023-05-02 [1] Bioconductor\n digest                 0.6.31    2022-12-11 [1] CRAN (R 4.3.0)\n downloader             0.4       2015-07-09 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dqrng                  0.3.0     2021-05-01 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.20      2023-01-17 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n filelock               1.0.2     2018-10-05 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n fs                     1.6.2     2023-04-25 [1] CRAN (R 4.3.0)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicAlignments      1.36.0    2023-04-25 [1] Bioconductor\n GenomicFeatures      * 1.52.0    2023-04-25 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n ggbeeswarm             0.7.2     2023-04-29 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n irlba                  2.3.5.1   2022-10-03 [1] CRAN (R 4.3.0)\n jsonlite               1.8.4     2022-12-06 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.42      2023-01-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n metapod                1.8.0     2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n patchwork            * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits            1.1.1     2020-01-24 [1] CRAN (R 4.3.0)\n progress               1.2.2     2019-05-16 [1] CRAN (R 4.3.0)\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n rentrez                1.2.3     2020-11-10 [1] CRAN (R 4.3.0)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.21      2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n Rsamtools              2.16.0    2023-04-25 [1] Bioconductor\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n Rsubread               2.14.2    2023-05-22 [1] Bioconductor\n rsvd                   1.0.5     2021-04-16 [1] CRAN (R 4.3.0)\n rtracklayer            1.60.0    2023-04-25 [1] Bioconductor\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n ScaledMatrix           1.8.1     2023-05-03 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n scater               * 1.28.0    2023-04-25 [1] Bioconductor\n scran                * 1.28.1    2023-05-02 [1] Bioconductor\n scuttle              * 1.10.1    2023-05-02 [1] Bioconductor\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n SingleCellExperiment * 1.22.0    2023-04-25 [1] Bioconductor\n sparseMatrixStats      1.12.1    2023-06-20 [1] Bioconductor\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tximport               1.28.0    2023-04-25 [1] Bioconductor\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.2     2023-04-19 [1] CRAN (R 4.3.0)\n vipor                  0.4.5     2017-03-22 [1] CRAN (R 4.3.0)\n viridis                0.6.2     2021-10-13 [1] CRAN (R 4.3.0)\n viridisLite            0.4.2     2023-05-02 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xml2                   1.3.4     2023-04-27 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Analyzing quantitative data</span>"
    ]
  },
  {
    "objectID": "chapters/03_exploring_summary_stats.html",
    "href": "chapters/03_exploring_summary_stats.html",
    "title": "3  Exploring and visualizing summary statistics",
    "section": "",
    "text": "3.1 Exploratory data analyses\nHere, we will describe the code to (visually) explore summary statistics of the BioSamples included in the SEA 2.0.\nTo start, let’s load the sample metadata information.\nload(here(\"data\", \"sample_metadata_complete.rda\"))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring and visualizing summary statistics</span>"
    ]
  },
  {
    "objectID": "chapters/03_exploring_summary_stats.html#exploratory-data-analyses",
    "href": "chapters/03_exploring_summary_stats.html#exploratory-data-analyses",
    "title": "3  Exploring and visualizing summary statistics",
    "section": "",
    "text": "3.1.1 Number of samples per body part\nHere, we will visualize the number of samples per body part as a bar plot.\n\n# Get data frame of counts\nsamples_per_body_part &lt;- sample_metadata_complete |&gt;\n    count(Part) |&gt;\n    arrange(-n) |&gt;\n    mutate(\n        Part = str_to_title(Part),\n        Part = factor(Part, levels = Part)\n    )\n\n# Plot data\np_samples_per_body_part &lt;- ggplot(\n    samples_per_body_part, aes(x = n, y = Part)\n) +\n    geom_bar(stat = \"identity\", fill = \"gray50\") +\n    geom_text(aes(label = n), hjust = -0.2) +\n    theme_minimal() +\n    labs(\n        x = \"Number of BioSamples\", y = \"\",\n        title = \"Number of BioSamples per body part\"\n    ) +\n    scale_x_continuous(limits = c(0, 2000))\n\n\n# Save plot to file\nsave(\n    p_samples_per_body_part, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_samples_per_body_part.rda\")\n)\n\n\n\n3.1.2 Sequencing technology and library layout\n\n# Get a data frame of counts for sequencing technology\nseqtech_count &lt;- sample_metadata_complete |&gt;\n    mutate(\n        Instrument = str_replace_all(\n            Instrument, c(\n                \"^HiSeq X Ten$\" = \"Illumina HiSeq X Ten\",\n                \"^Illumina HiSeq X$\" = \"Illumina HiSeq X Ten\"\n            )\n        )\n    ) |&gt;\n    count(Instrument) |&gt;\n    arrange(-n) |&gt;\n    mutate(\n        Instrument = factor(Instrument, levels = Instrument),\n        Group = \"Sequencing instrument\"\n    ) |&gt;\n    rename(Variable = Instrument)\n\n# Get a data frame of counts for library layout\nlayout_count &lt;- sample_metadata_complete |&gt;\n    mutate(Layout = str_replace_all(Layout, c(\n        \"PAIRED\" = \"Paired\",\n        \"SINGLE\" = \"Single\"\n    ))) |&gt;\n    count(Layout) |&gt;\n    arrange(-n) |&gt;\n    mutate(\n        Layout = factor(Layout, levels = Layout),\n        Group = \"Layout\"\n    ) |&gt;\n    rename(Variable = Layout)\n\n# Plot data\np_seqtech_layout_count &lt;- bind_rows(\n    seqtech_count, layout_count\n) |&gt;\n    mutate(prop = n / nrow(sample_metadata_complete)) |&gt;\n    ggplot(aes(x = prop, y = Variable)) +\n    geom_bar(aes(fill = Group), stat = \"identity\", show.legend = FALSE) +\n    ggsci::scale_fill_jama() +\n    facet_grid(Group ~ ., scales = \"free\", space = \"free\") +\n    geom_text(aes(label = n), hjust = -0.2) +\n    theme_bw() +\n    scale_x_continuous(limits = c(0, 1)) +\n    labs(\n        title = \"Summary statistics on library layout and sequencing instrument\",\n        x = \"Relative frequency\", y = \"\"\n    )\n\np_seqtech_layout_count\n\n\n\n\n\n\n\n\n\n# Save plot to file\nsave(\n    p_seqtech_layout_count, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_seqtech_layout_count.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring and visualizing summary statistics</span>"
    ]
  },
  {
    "objectID": "chapters/03_exploring_summary_stats.html#time-series-data",
    "href": "chapters/03_exploring_summary_stats.html#time-series-data",
    "title": "3  Exploring and visualizing summary statistics",
    "section": "3.2 Time series data",
    "text": "3.2 Time series data\nHere, we will explore the evolution of some variables (e.g., body part, sequencing technology, etc.) over time, as well as a cumulative distribution of samples over time.\n\n3.2.1 Number of samples over time\nHere, we will plot a cumulative sum of the number of samples over time, highlighting what changed since the Soybean Expression Atlas 1.0 (last download on July 21, 2017).\n\np_nsamples_over_time_cumsum &lt;- sample_metadata_complete |&gt;\n    select(Date) |&gt;\n    mutate(\n        Date = as.Date(Date),\n        N = 1\n    ) |&gt;\n    arrange(Date) |&gt;\n    mutate(cumulative_sum = cumsum(N)) |&gt;\n    # Plot\n    ggplot(aes(x = Date, y = cumulative_sum, group = 1)) +\n    geom_line() +\n    scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") + \n    theme_minimal() +\n    labs(\n        title = \"Cumulative number of samples over time\",\n        subtitle = \"Samples that were not included in the SEA 2.0 were not displayed\",\n        x = \"\", y = \"Number of samples\"\n    ) +\n    scale_y_continuous(breaks = seq(0, 6000, 1000)) +\n    geom_vline(\n        xintercept = as.Date(\"2017-07-21\"), color = \"brown3\", linetype = 2\n    ) +\n    annotate(\n        \"text\", x = as.Date(\"2015-06-01\"), y = 3500, \n        label = \"Last download for the SEA 1.0\", color = \"gray20\"\n    ) +\n    annotate(\n        geom = \"curve\", \n        x = as.Date(\"2015-01-01\"), xend = as.Date(\"2017-03-01\"),\n        y = 3200, yend = 2500, \n        curvature = .2, arrow = arrow(length = unit(2, \"mm\"))\n    )\n\np_nsamples_over_time_cumsum\n\n\n\n\n\n\n\n\n\n# Save plot object\nsave(\n    p_nsamples_over_time_cumsum, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_nsamples_over_time_cumsum.rda\")\n)\n\n\n\n3.2.2 Sequencing technologies and library layout over time\nHere, we will explore how sequencing technologies and library layout evolved over time by taking a look at the deposited samples. We want to find out whether a particular technology was common in the early years, but was quickly replaced by more modern technologies, for example. For library layout, we hypothesize that single-end sequencing was more common in the early years, but paired-end sequencing has now become more popular.\n\n# Plot cumulative number of samples for each sequencing instrument over time\np_seqtech_timeseries &lt;- sample_metadata_complete |&gt;\n    # Select only Date and Instrument and add dummy variable N with count\n    select(Instrument, Date) |&gt;\n    mutate(\n        Instrument = str_replace_all(\n            Instrument, c(\n                \"^HiSeq X Ten$\" = \"Illumina HiSeq X Ten\",\n                \"^Illumina HiSeq X$\" = \"Illumina HiSeq X Ten\"\n            )\n        ),\n        Date = as.Date(Date),\n        N = 1\n    ) |&gt;\n    # Remove instruments with &lt;50 samples\n    inner_join(\n        seqtech_count |&gt; filter(n &gt;= 50) |&gt; select(Instrument = Variable)\n    ) |&gt;\n    arrange(Date) |&gt;\n    # Calculate cumulative sum per instrument\n    group_by(Instrument) |&gt;\n    mutate(cumulative_sum = cumsum(N)) |&gt;\n    ungroup() |&gt;\n    mutate(\n        Instrument = factor(\n            Instrument, levels = seqtech_count |&gt; filter(n &gt;= 50) |&gt; pull(Variable)\n        )\n    ) |&gt;\n    ggplot(aes(x = Date, y = cumulative_sum, group = Instrument)) +\n    geom_line(aes(color = Instrument)) +\n    ggsci::scale_color_d3(\"category20\") +\n    scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") + \n    theme_minimal() +\n    labs(\n        title = \"Cumulative number of samples using each sequencing instrument over time\",\n        subtitle = \"Instruments with &lt;50 samples are not displayed\",\n        x = \"\", y = \"Number of samples\"\n    ) +\n    ylim(0, 2000) +\n    theme(legend.position = \"bottom\")\n\n\n# Plot cumulative number of samples for each library layout over time\np_layout_timeseries &lt;- sample_metadata_complete |&gt;\n    select(Layout, Date) |&gt;\n    mutate(\n        Layout = str_replace_all(Layout, c(\n            \"PAIRED\" = \"Paired\",\n            \"SINGLE\" = \"Single\"\n        )),\n        Date = as.Date(Date),\n        N = 1\n    ) |&gt;\n    arrange(Date) |&gt;\n    # Calculate cumulative sum per instrument\n    group_by(Layout) |&gt;\n    mutate(cumulative_sum = cumsum(N)) |&gt;\n    ungroup() |&gt;\n    ggplot(aes(x = Date, y = cumulative_sum, group = Layout)) +\n    geom_line(aes(color = Layout)) +\n    scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") + \n    theme_minimal() +\n    ggsci::scale_color_jama() +\n    labs(\n        title = \"Cumulative number of samples using each library layout over time\",\n        x = \"\", y = \"Number of samples\"\n    ) +\n    ylim(0, 3000) +\n    theme(legend.position = \"bottom\")\n\n\n# Plot number of samples for each body part over time\np_bodypart_timeseries &lt;- sample_metadata_complete |&gt;\n    select(Part, Date) |&gt;\n    # Remove body parts with &lt;50 samples\n    inner_join(\n        count(sample_metadata_complete, Part) |&gt; filter(n &gt;= 50) |&gt; select(Part)\n    ) |&gt;\n    mutate(\n        Part = str_to_title(Part),\n        Date = as.Date(Date),\n        N = 1\n    ) |&gt;\n    mutate(\n        Part = factor(\n            Part, levels = count(sample_metadata_complete, Part) |&gt; \n                arrange(-n) |&gt;\n                filter(n &gt;= 50) |&gt; \n                mutate(Part = str_to_title(Part)) |&gt;\n                pull(Part)\n        )\n    ) |&gt;\n    arrange(Date) |&gt;\n    # Calculate cumulative sum per instrument\n    group_by(Part) |&gt;\n    mutate(cumulative_sum = cumsum(N)) |&gt;\n    ungroup() |&gt;\n    ggplot(aes(x = Date, y = cumulative_sum, group = Part)) +\n    geom_line(aes(color = Part)) +\n    scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") + \n    theme_minimal() +\n    ggsci::scale_color_d3(\"category20\") +\n    labs(\n        title = \"Cumulative number of samples for each body part over time\",\n        subtitle = \"Body parts with &lt;50 samples are not displayed\",\n        x = \"\", y = \"Number of samples\"\n    ) +\n    ylim(0, 2000) +\n    theme(legend.position = \"bottom\") +\n    guides(color = guide_legend(nrow = 2))\n\np_seqtech_timeseries / p_layout_timeseries / p_bodypart_timeseries\n\n\n\n\n\n\n\n\n\n# Saving each plot\nsave(\n    p_seqtech_timeseries, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_seqtech_timeseries.rda\")\n)\n\nsave(\n    p_layout_timeseries, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_layout_timeseries.rda\")\n)\n\nsave(\n    p_bodypart_timeseries, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_bodypart_timeseries.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring and visualizing summary statistics</span>"
    ]
  },
  {
    "objectID": "chapters/03_exploring_summary_stats.html#number-of-samples-per-country",
    "href": "chapters/03_exploring_summary_stats.html#number-of-samples-per-country",
    "title": "3  Exploring and visualizing summary statistics",
    "section": "3.3 Number of samples per country",
    "text": "3.3 Number of samples per country\nIn this section, we will calculate and visualize the number of samples per country to understand who contributes with most samples to databases. We also want to look for associations between the number of samples and soybean production.\nGeographic information will be obtainded from the file sra_run_selector_2023-12-16.txt, which was downloaded from SRA Run Selector. In details, we searched “Glycine max[ORGN] AND RNA-seq[STRA]” on NCBI’s SRA, clicked on Send results to Run selector, and downloaded the metadata for all samples.\n\nsamples_per_country &lt;- read_csv(\n    here(\"data\", \"sra_run_selector_2023-02-16.txt\")\n) |&gt; \n    inner_join(sample_metadata_complete |&gt; rownames_to_column(\"BioSample\")) |&gt;\n    distinct(BioSample, .keep_all = TRUE) |&gt;\n    select(BioSample, BioProject, `Center Name`, geo_loc_name_country, geo_loc_name) |&gt;\n    mutate(\n        Country = case_when(\n            is.na(geo_loc_name_country) | \n                str_detect(geo_loc_name_country, \"uncalculated\") ~ `Center Name`,\n            TRUE ~ geo_loc_name_country\n        )\n    ) |&gt;\n    mutate(\n        Country = str_replace_all(\n            Country, c(\n                \"JGI\" = \"USA\",\n                \"HORTICULTURE AND CROP SCIENCE, OHIO STATE UNIVERSITY\" = \"USA\",\n                \"FUJIAN AGRICULTURE AND FORESTRY UNIVERSITY\" = \"China\",\n                \"MICHIGAN STATE UNIVERSITY\" = \"USA\",\n                \"Hong Kong\" = \"China\",\n                \"UNIVERSIDADE FEDERAL DE LAVRAS\" = \"Brazil\",\n                \"UNIVERSITY OF GEORGIA\" = \"Georgia\",\n                \"INSTITUTE OF GENETICS AND DEVELOPMENTAL BIOLOGY, C\" = \"China\",\n                \"RIKEN_CSRS\" = \"Japan\",\n                \"KUNMING INSTITUTE OF ZOOLOGY\" = \"China\",\n                \"ADAM MICKIEWICZ UNIVERSITY POZNAN\" = \"Poland\",\n                \"NICS\" = \"India\",\n                \"GUANGZHOU UNIVERSITY\" = \"China\",\n                \"ANYANG INSTITUTE OF TECHNOLOGY\" = \"China\",\n                \"BRAZILIAN AGRICULTURAL RESEARCH CORPORATION - EMBRAPA\" = \"Brazil\",\n                \"UNIVERSITY OF MISSOURI AT COLUMBIA\" = \"USA\",\n                \"THE OHIO STATE UNIVERSITY\" = \"USA\",\n                \"SICHUAN AGRICULTURAL UNIVERSITY\" = \"China\",\n                \"NORTHWEST A&F UNIVERSITY\" = \"China\",\n                \"NORTHEAST INSTITUTE OF GEOGRAPHY AND AGROECOLOGY\" = \"China\",\n                \".*Switzerland.*\" = \"Switzerland\",\n                \"NATIONAL ACADEMY OF AGRICULTURAL SCIENCE\" = \"India\",\n                \"UNIVERSITY OF MELBOURNE\" = \"Australia\",\n                \"TOTTORI\" = \"Japan\",\n                \"TOKYO_AGRITECH\" = \"Japan\",\n                \"JILIN NORMAL UNIVERSITY\" = \"China\",\n                \"UNIVERSIDADE FEDERAL DO RIO DE JANEIRO\" = \"Brazil\",\n                \"UNITED STATES DEPARTMENT OF AGRICULTURE\" = \"USA\",\n                \"SOUTH CHINA AGRICULTURAL UNIVERSITY\" = \"China\",\n                \"NUGSS\" = \"Japan\",\n                \"LAVAL UNIVERSITY\" = \"Canada\",\n                \"KOCHI\" = \"India\",\n                \"CHUBU\" = \"Japan\",\n                \"USDA-ARS\" = \"USA\",\n                \"PURDUE UNIVERSITY\" = \"USA\",\n                \"ICS-CAAS\" = \"China\",\n                \"AGRICULTURE & AGRI-FOOD CANADA\" = \"Canada\",\n                \"UNIVERSITY OF ARIZONA\" = \"USA\",\n                \"QINGDAO AGRICULTURAL UNIVERSITY\" = \"China\",\n                \"CUHK\" = \"China\", \n                \"THE UNIVERSITY OF QUEENSLAND\" = \"Australia\",\n                \"SEOUL NATIONAL UNIVERSITY\" = \"South Korea\",\n                \"NANJING AGRICULTURAL UNIVERSITY\" = \"China\",\n                \"INSTITUTE OF MICROBIOLOGY, CHINESE ACADEMY OF SCIENCES\" = \"China\"\n            )\n        )\n    ) |&gt;\n    filter(\n        !Country %in% c(\n            \"Mehran Dastmalchi\", \"Arun kumaran Anguraj vadivel\"\n        )\n    ) |&gt;\n    arrange(Country)\n\n\n# Get geographic information for samples from \"GEO\"\nget_bioproject_submission &lt;- function(bioproject_ids) {\n    \n    submission &lt;- Reduce(rbind, lapply(bioproject_ids, function(x) {\n        \n        url &lt;- file.path(\"https://www.ncbi.nlm.nih.gov/bioproject\", x)\n        s &lt;- rvest::read_html(url) |&gt;\n            rvest::html_table() |&gt;\n            pluck(1) |&gt;\n            filter(X1 == \"Submission\") |&gt;\n            pull(X2)\n        \n        sdf &lt;- data.frame(BioProject = x, Submission = s)\n        return(sdf)\n    }))\n    \n    return(submission)\n}\n\ngeo_projects &lt;- samples_per_country |&gt;\n    filter(Country == \"GEO\") |&gt;\n    pull(BioProject) |&gt;\n    unique()\n\ngeo_projects_info &lt;- get_bioproject_submission(geo_projects)\ngeo_projects_location &lt;- geo_projects_info |&gt;\n    mutate(\n        Submission = str_replace_all(\n            Submission, \".*\\\\d{1,2}-[A-Z][a-z]{2}-\\\\d{4}\", \"\"\n        )\n    ) |&gt;\n    mutate(\n        Country = str_replace_all(\n            Submission, c(\n                \".*Illinois.*\" = \"USA\",\n                \".*Universidade.*\" = \"Brazil\",\n                \".*USDA.*\" = \"USA\",\n                \".*Nanjing.*\" = \"China\",\n                \".*United States.*\" = \"USA\",\n                \".*US .*\" = \"USA\",\n                \".*UNCC.*\" = \"USA\",\n                \".*Donald Danforth.*\" = \"USA\",\n                \".*Missouri.*\" = \"USA\",\n                \".*Georgia.*\" = \"Georgia\",\n                \".*Embrapa.*\" = \"Brazil\",\n                \".*UFRGS.*\" = \"Brazil\",\n                \".*California.*\" = \"USA\",\n                \".*Virginia Tech.*\" = \"USA\",\n                \".*Chinese.*\" = \"China\",\n                \".*Purdue.*\" = \"USA\",\n                \".*NC State University.*\" = \"USA\",\n                \".*Hangzhou.*\" = \"China\",\n                \".*Iowa.*\" = \"USA\",\n                \".*Institute of Genetics and Developmental Biology.*\" = \"China\",\n                \".*Nanchang.*\" = \"China\",\n                \".*Tennessee.*\" = \"USA\",\n                \".*South Dakota.*\" = \"USA\",\n                \".*North Carolina.*\" = \"USA\",\n                \".*Shandong.*\" = \"China\",\n                \".*Zhejiang.*\" = \"China\",\n                \".*China.*\" = \"China\",\n                \".*Wisconsin.*\" = \"USA\",\n                \".*West Virginia.*\" = \"USA\",\n                \".*Fujian.*\" = \"China\",\n                \".*INRA.*\" = \"France\",\n                \".*Salk.*\" = \"USA\",\n                \".*Tottori.*\" = \"Japan\",\n                \".*Kangwon.*\" = \"South Korea\",\n                \".*Shanghai.*\" = \"China\",\n                \".*Jilin.*\" = \"China\",\n                \".*Michigan.*\" = \"USA\",\n                \".*Northeast Agricultural University.*\" = \"China\",\n                \".*USA.*\" = \"USA\",\n                \".*IGDB.*\" = \"China\"\n            )\n        )\n    )\n\n# Create a final table of samples per country\nsamples_nongeo &lt;- samples_per_country |&gt;\n    filter(Country != \"GEO\") |&gt; \n    select(BioSample, Country)\n\nsamples_geo &lt;- geo_projects_location |&gt;\n    select(BioProject, Country) |&gt;\n    inner_join(samples_per_country |&gt; select(BioProject, BioSample)) |&gt;\n    select(BioSample, Country)\n\nfinal_samples_per_country &lt;- bind_rows(\n    samples_nongeo, samples_geo\n) |&gt;\n    count(Country) |&gt;\n    arrange(-n)\n\nThere are 27 countries in the list of submitters. However, for a better visualization, we will only include the top 20 countries. Seven countries contributed with only 1 sample each, and they are Belgium, Norway, Romania, Serbia, Taiwan, Ukraine, and Uzbekistan.\n\n# Get world map\nworld &lt;- map_data(\"world\") # World map\n\n# Get one point per country (capital)\nworld_capital &lt;- world.cities[world.cities$capital == 1, ]\n\n# SRA samples in the world\nworld_samples &lt;- inner_join(\n    final_samples_per_country |&gt; slice_head(n = 20), \n    world_capital |&gt; rename(Country = country.etc)\n) |&gt;\n    rownames_to_column(\"code\") |&gt;\n    mutate(\n        log2_n = log2(n),\n        log10_n = log10(n)\n    )\n\n# Create color code for countries\nfinal_world &lt;- left_join(\n    world, world_samples, by = c(\"region\" = \"Country\")\n) |&gt;\n    mutate(\n        code = as.numeric(code),\n        code = tidyr::replace_na(code, 0),\n        code = as.factor(code)\n    )\n\n\n# Plot map with blue scale and bubbles\np_map_samples_per_country &lt;- ggplot() +\n    geom_map(\n        data = final_world, map = world, \n        aes(long.x, lat.x, map_id = region, fill = as.numeric(log2_n)),\n        color = \"white\", alpha = 0.7, size = 0.1, show.legend = FALSE\n    ) +\n    labs(fill = expression(paste(log[2], \" N\"))) +\n    scale_fill_gradient(low = \"#56B1F7\", high = \"#132B43\") +    \n    geom_point(\n        data = world_samples, aes(x = long, y = lat, size = n), \n        color = \"brown3\", alpha = 0.9, show.legend = FALSE\n    ) +\n    guides(size = FALSE, color = FALSE) +\n    geom_label_repel(\n        data = world_samples, \n        aes(\n            x = long, y = lat, \n            label = paste0(1:nrow(world_samples), \". \", Country)\n        ), \n        max.overlaps = 20,\n        size = 2.9\n    ) +\n    theme_void() +\n    labs(\n        title = \"Geographic distribution of the top 20 countries in number of samples\"\n    )\n\n\n# Plot bar plot of number of samples per country\n## Top world soybean producers: http://soystats.com/international-world-soybean-production/\ntop_producers &lt;- c(\n    \"Brazil\", \"USA\", \"Argentina\", \"China\", \"India\", \"Paraguay\", \"Canada\"\n)\n\np_barplot_samples_per_country &lt;- final_samples_per_country |&gt;\n    slice_head(n = 20) |&gt;\n    mutate(Country = factor(Country, levels = rev(Country))) |&gt;\n    ggplot(aes(x = n, y = Country)) +\n    geom_col(\n        aes(fill = ifelse(Country %in% top_producers, \"steelblue3\", \"grey60\"))\n    ) +\n    scale_fill_identity() +\n    #geom_col(fill = \"grey50\") +\n    geom_text(aes(label = n), hjust = -0.2) +\n    theme_minimal() +\n    labs(\n        title = \"Top 20 countries in number of samples\",\n        subtitle = \"Blue bars indicate world leaders in soybean production.\",\n        x = \"Number of samples\", y = \"\"\n    ) +\n    xlim(0, 3500)\n\nwrap_plots(\n    p_map_samples_per_country, p_barplot_samples_per_country,\n    widths = c(2, 1)\n)\n\n\n\n\n\n\n\n\n\n# Save plots to files\nsave(\n    p_map_samples_per_country, final_world, world, world_samples,\n    compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_map_samples_per_country.rda\")\n)\n\nsave(\n    p_barplot_samples_per_country, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_barplot_samples_per_country.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring and visualizing summary statistics</span>"
    ]
  },
  {
    "objectID": "chapters/03_exploring_summary_stats.html#session-information",
    "href": "chapters/03_exploring_summary_stats.html#session-information",
    "title": "3  Exploring and visualizing summary statistics",
    "section": "Session information",
    "text": "Session information\nThis document was created under the following conditions:\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-04\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.3   2024-06-21 [1] CRAN (R 4.4.1)\n colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.4.1)\n digest        0.6.36  2024-06-23 [1] CRAN (R 4.4.1)\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.4.1)\n evaluate      0.24.0  2024-06-10 [1] CRAN (R 4.4.1)\n fansi         1.0.6   2023-12-08 [1] CRAN (R 4.4.1)\n farver        2.1.2   2024-05-13 [1] CRAN (R 4.4.1)\n fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.1)\n forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.4.1)\n generics      0.1.3   2022-07-05 [1] CRAN (R 4.4.1)\n ggplot2     * 3.5.1   2024-04-23 [1] CRAN (R 4.4.1)\n ggrepel     * 0.9.5   2024-01-10 [1] CRAN (R 4.4.1)\n ggsci         3.2.0   2024-06-18 [1] CRAN (R 4.4.1)\n glue          1.7.0   2024-01-09 [1] CRAN (R 4.4.1)\n gtable        0.3.5   2024-04-22 [1] CRAN (R 4.4.1)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.4.1)\n hms           1.1.3   2023-03-21 [1] CRAN (R 4.4.1)\n htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.1)\n jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.4.1)\n knitr         1.48    2024-07-07 [1] CRAN (R 4.4.1)\n labeling      0.4.3   2023-08-29 [1] CRAN (R 4.4.1)\n lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.1)\n lubridate   * 1.9.3   2023-09-27 [1] CRAN (R 4.4.1)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.1)\n maps        * 3.4.2   2023-12-15 [1] CRAN (R 4.4.1)\n munsell       0.5.1   2024-04-01 [1] CRAN (R 4.4.1)\n patchwork   * 1.2.0   2024-01-08 [1] CRAN (R 4.4.1)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.4.1)\n purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.4.1)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp          1.0.13  2024-07-17 [1] CRAN (R 4.4.1)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.4.1)\n rlang         1.1.4   2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown     2.27    2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot     2.0.4   2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.4.1)\n scales        1.3.0   2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.4.1)\n stringi       1.8.4   2024-05-06 [1] CRAN (R 4.4.1)\n stringr     * 1.5.1   2023-11-14 [1] CRAN (R 4.4.1)\n tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.4.1)\n tidyr       * 1.3.1   2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect    1.2.1   2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.4.1)\n timechange    0.3.0   2024-01-18 [1] CRAN (R 4.4.1)\n tzdb          0.4.0   2023-05-12 [1] CRAN (R 4.4.1)\n utf8          1.2.4   2023-10-22 [1] CRAN (R 4.4.1)\n vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.1)\n withr         3.0.0   2024-01-16 [1] CRAN (R 4.4.1)\n xfun          0.51    2025-02-19 [1] CRAN (R 4.4.1)\n yaml          2.3.9   2024-07-05 [1] CRAN (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploring and visualizing summary statistics</span>"
    ]
  },
  {
    "objectID": "chapters/04_create_app_data_directory.html",
    "href": "chapters/04_create_app_data_directory.html",
    "title": "4  Creating a directory with data for the Shiny app",
    "section": "",
    "text": "4.1 .parquet files in parquet_dir\nHere, we will describe the code to create the files that will be required to run the Shiny app. These files will be stored in a directory named app_data.\nGene-level transcript abundances in TPM and bias-corrected counts will be stored in a partitioned .parquet directory, so that expression data can be accessed in the app back-end with Apache Arrow via the BiocStyle::CRANpkg(\"arrow\") package.\nThis directory contains partitioned .parquet files with a gene expression data frame in long format with the following variables:\n# Load SummarizedExperiment object\nload(here(\"products\", \"result_files\", \"se_atlas_gene.rda\"))\n\n# Get expression data in long format\n## TPM\nexp_tpm &lt;- assay(se_atlas_gene, \"gene_TPM\") |&gt;\n    reshape2::melt() |&gt;\n    mutate(\n        Gene = as.character(Var1),\n        Sample = as.character(Var2),\n        TPM = as.numeric(value)\n    ) |&gt;\n    dplyr::select(Gene, Sample, TPM)\n\nhist(log_sorted_tpm)\n\n## Counts\nexp_counts &lt;- assay(se_atlas_gene, \"gene_counts\") |&gt;\n    reshape2::melt() |&gt;\n    mutate(\n        Gene = as.character(Var1),\n        Sample = as.character(Var2),\n        Count = as.numeric(value)\n    ) |&gt;\n    dplyr::select(Gene, Sample, Count)\n    \nnames(exp_counts) &lt;- c(\"Gene\", \"Sample\", \"Count\")\n\n## Combine data frames\nidentical(exp_counts$Sample, exp_tpm$Sample)\nidentical(exp_counts$Gene, exp_tpm$Gene)\nexp_final &lt;- cbind(exp_tpm, exp_counts[, \"Count\", drop = FALSE])\n\n# Export data with BioProject and Part info\nsample_metadata &lt;- colData(se_atlas_gene) |&gt;\n    as.data.frame() |&gt;\n    tibble::rownames_to_column(\"BioSample\")\n\nsample_and_additional_info &lt;- data.frame(\n    Sample = sample_metadata$BioSample,\n    BioProject = sample_metadata$BioProject,\n    Part = sample_metadata$Part\n)\n\nexp_final2 &lt;- left_join(\n    exp_final, \n    sample_and_additional_info\n) |&gt;\n    mutate(\n        BioProject = as.factor(BioProject),\n        Sample = as.factor(Sample),\n        BioProject = as.factor(BioProject),\n        Part = as.factor(Part)\n    )\n\nparquet_dir_partitioned &lt;- here(\"app_data\", \"parquet_dir\")\nfs::dir_create(parquet_dir_partitioned)\n\narrow::write_dataset(\n    exp_final2, \n    path = parquet_dir_partitioned,\n    format = \"parquet\",\n    partitioning = c(\"BioProject\", \"Part\")\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating a directory with data for the Shiny app</span>"
    ]
  },
  {
    "objectID": "chapters/04_create_app_data_directory.html#parquet-files-in-parquet_dir",
    "href": "chapters/04_create_app_data_directory.html#parquet-files-in-parquet_dir",
    "title": "4  Creating a directory with data for the Shiny app",
    "section": "",
    "text": "Gene: character, gene ID.\nSample: character, sample name.\nTPM: numeric, gene-level transcript abundances in TPM.\nCount: numeric, gene-level transcript abundances in bias-corrected counts.\nBioProject: factor, BioProject IDs.\nPart: character, plant part.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating a directory with data for the Shiny app</span>"
    ]
  },
  {
    "objectID": "chapters/04_create_app_data_directory.html#expression_by_body_part-directory",
    "href": "chapters/04_create_app_data_directory.html#expression_by_body_part-directory",
    "title": "4  Creating a directory with data for the Shiny app",
    "section": "4.2 expression_by_body_part/ directory",
    "text": "4.2 expression_by_body_part/ directory\nThis directory contains static .tsv files with gene expression information by body part, and it is used by the “Download by body part” tab to avoid having to load large volumes of data in memory, which is problematic when there are too many users.\nFirst, let’s export gene-level abundances.\n\nload(here(\"products\", \"result_files\", \"se_atlas_gene.rda\"))\n\n# Get a list of character vectors with samples per body part\nsamples_per_tissue &lt;- colData(se_atlas_gene) |&gt;\n    as.data.frame() |&gt;\n    tibble::rownames_to_column(\"BioSample\")\n\nsamples_per_tissue &lt;- split(\n    samples_per_tissue$BioSample, samples_per_tissue$Part\n)\n\n# Get expression data frames in TPM\ntpm &lt;- assay(se_atlas_gene, \"gene_TPM\")\ntpm_matrices &lt;- lapply(samples_per_tissue, function(x) {\n    \n    return(tpm[, x] |&gt; as.data.frame() |&gt; tibble::rownames_to_column(\"Gene\"))\n    \n})\n\n# Get expression data frames in counts\ncounts &lt;- assay(se_atlas_gene, \"gene_counts\")\ncount_matrices &lt;- lapply(samples_per_tissue, function(x) {\n    \n    return(counts[, x] |&gt; as.data.frame() |&gt; tibble::rownames_to_column(\"Gene\"))\n    \n})\n\n\n# Export data to .tsv files\noutdir &lt;- here::here(\"app_data\", \"expression_by_body_part\")\nif(!dir.exists(outdir)) { dir.create(outdir, recursive = TRUE) }\n\ninvisible(lapply(seq_along(count_matrices), function(x) {\n    \n    tissue &lt;- names(count_matrices)[x]\n    file &lt;- file.path(outdir, paste0(tissue, \"_count.tsv\"))\n    \n    w &lt;- readr::write_tsv(\n        count_matrices[[x]], \n        file = file\n    )\n    return(w)\n}))\n\ninvisible(lapply(seq_along(tpm_matrices), function(x) {\n    \n    tissue &lt;- names(tpm_matrices)[x]\n    file &lt;- file.path(outdir, paste0(tissue, \"_TPM.tsv\"))\n    \n    w &lt;- readr::write_tsv(\n        tpm_matrices[[x]], \n        file = file\n    )\n    return(w)\n}))\n\nNow, we will export transcript-level abundances.\n\nload(here(\"products\", \"result_files\", \"se_atlas_transcript.rda\"))\n\n# Get expression data frames in TPM\ntpm &lt;- assay(se_atlas_transcript, \"tx_TPM\")\ntpm_matrices &lt;- lapply(samples_per_tissue, function(x) {\n    \n    return(\n        tpm[, x] |&gt; \n            as.data.frame() |&gt; \n            tibble::rownames_to_column(\"Transcript\")\n    )\n    \n})\n\n# Get expression data frames in counts\ncounts &lt;- assay(se_atlas_transcript, \"tx_counts\")\ncount_matrices &lt;- lapply(samples_per_tissue, function(x) {\n    \n    return(\n        counts[, x] |&gt; \n            as.data.frame() |&gt; \n            tibble::rownames_to_column(\"Transcript\")\n    )\n    \n})\n\n\n# Export data to .tsv files\noutdir &lt;- here::here(\"app_data\", \"expression_by_body_part\")\nif(!dir.exists(outdir)) { dir.create(outdir, recursive = TRUE) }\n\ninvisible(lapply(seq_along(count_matrices), function(x) {\n    \n    tissue &lt;- names(count_matrices)[x]\n    file &lt;- file.path(outdir, paste0(tissue, \"_count_tx.tsv\"))\n    \n    w &lt;- readr::write_tsv(\n        count_matrices[[x]], \n        file = file\n    )\n    return(w)\n}))\n\ninvisible(lapply(seq_along(tpm_matrices), function(x) {\n    \n    tissue &lt;- names(tpm_matrices)[x]\n    file &lt;- file.path(outdir, paste0(tissue, \"_TPM_tx.tsv\"))\n    \n    w &lt;- readr::write_tsv(\n        tpm_matrices[[x]], \n        file = file\n    )\n    return(w)\n}))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating a directory with data for the Shiny app</span>"
    ]
  },
  {
    "objectID": "chapters/04_create_app_data_directory.html#r-objects",
    "href": "chapters/04_create_app_data_directory.html#r-objects",
    "title": "4  Creating a directory with data for the Shiny app",
    "section": "4.3 R objects",
    "text": "4.3 R objects\nThe following R objects are small enough to be stored as .rda files, so that they can be directly loaded when the app starts without compromising performance. These .rda objects will be stored in the data/ directory of the app.\n\n4.3.1 project_metadata.rda\nThis object stores metadata at the BioProject level.\n\n#' Create a project table to display in the \"Search by project\" tab\n#' \n#' @param metadata Data frame of sample metadata.\n#' \n#' @return A data frame with the variables:\n#' \\itemize{\n#'   \\item \n#'   \\item \n#' }\n#' @importFrom dplyr add_count select rename distinct group_by filter \n#' summarise arrange\n#' @importFrom stringr str_c\n#' @noRd\ncreate_project_table &lt;- function(metadata = NULL) {\n    table &lt;- metadata %&gt;%\n        dplyr::filter(startsWith(BioProject, \"PRJ\")) %&gt;%\n        dplyr::add_count(BioProject) %&gt;%\n        dplyr::select(BioProject, n, Study_title, Study_abstract) %&gt;%\n        dplyr::rename(\n            N = n, \n            `Study title` = Study_title,\n            `Study abstract` = Study_abstract\n        ) %&gt;%\n        dplyr::distinct()\n    \n    tissue_count &lt;- metadata %&gt;%\n        dplyr::filter(startsWith(BioProject, \"PRJ\")) %&gt;%\n        group_by(BioProject, Part) %&gt;%\n        summarise(n = n()) %&gt;%\n        ungroup() %&gt;%\n        arrange(-n) %&gt;%\n        group_by(BioProject) %&gt;%\n        summarise(part_count = stringr::str_c(\n            Part, \": \", n, collapse = \" | \")\n        )\n    \n    final_table &lt;- dplyr::inner_join(\n        table, tissue_count, by = \"BioProject\"\n    ) %&gt;%\n        dplyr::rename(Part = part_count) %&gt;%\n        dplyr::select(\n            BioProject, N, Part, `Study title`, `Study abstract`\n        )\n    return(final_table)\n}\n\n# Combine sample metadata into project metadata\nproject_metadata &lt;- create_project_table(sample_metadata)\n\n# Create a data frame with PMID and DOI of publications associated with projects\nall_bioprojects &lt;- unique(project_metadata$BioProject)\npub_info &lt;- Reduce(rbind, lapply(all_bioprojects, function(x) {\n    message(x)\n    pubs &lt;- read_html(\n        paste0(\"https://www.ncbi.nlm.nih.gov/bioproject/?term=\", x)\n    ) |&gt;\n        html_nodes(\".RegularLink\") |&gt;\n        html_attr(\"href\")\n    \n    # Get PMID\n    pmid &lt;- pubs[grepl(\"/pubmed/\", pubs)]\n    pmid &lt;- unique(gsub(\"/pubmed/\", \"\", pmid))\n    \n    id_table &lt;- NULL\n    if(length(pmid) != 0) {\n        # Use PMID to extract DOI\n        doi &lt;- sapply(pmid, function(y) {\n            d &lt;- read_html(\n                paste0(\"https://pubmed.ncbi.nlm.nih.gov/\", y)\n            ) |&gt;\n                html_nodes(\"a\") |&gt;\n                html_attr(\"href\")\n            \n            d &lt;- unique(d[grepl(\"doi\\\\.org/\", d)])[1]\n            return(d)\n        })\n        \n        id_table &lt;- data.frame(\n            BioProject = x,\n            PMID = pmid,\n            DOI = doi\n        )\n    }\n    \n    return(id_table)\n}))\n   \npub_table &lt;- pub_info |&gt;\n    mutate(DOI = str_replace_all(DOI, \"https://doi.org/\", \"\")) |&gt;\n    group_by(BioProject) |&gt;\n    summarise(\n        DOI = paste0(DOI, collapse = \", \"),\n        PMID = paste0(PMID, collapse = \", \")\n    ) |&gt;\n    mutate(\n        DOI = as.factor(DOI),\n        PMID = as.factor(PMID)\n    )\n    \npmeta &lt;- left_join(project_metadata, pub_table) |&gt;\n    dplyr::select(\n        BioProject, N, Part, `Study title`, `Study abstract`, DOI, PMID\n    )\n\nproject_metadata &lt;- pmeta\n\n# Save object\nsave(\n    project_metadata, compress = \"xz\",\n    file = here(\"app_data\", \"project_metadata.rda\")\n)\n\n\n\n4.3.2 sample_metadata.rda\nThis file contains a data frame of sample metadata with the following fields:\n\nBioProject\nBioSample\nPart\nTreatment\nCultivar\nStudy_title\nStudy_abstract\nDOI\n\nThis file was generated with the following code:\n\nload(here(\"app_data\", \"project_metadata.rda\"))\n\n# Get a data frame of sample metadata\nsample_metadata &lt;- as.data.frame(colData(se_atlas_gene)) |&gt;\n    tibble::rownames_to_column(\"BioSample\") |&gt;\n    dplyr::select(\n        BioProject, BioSample, Part, Treatment, Cultivar,\n        Study_title, Study_abstract\n    ) |&gt;\n    inner_join(\n        project_metadata |&gt;\n            dplyr::select(BioProject, DOI)\n    )\n\n# Save to file\nsave(\n    sample_metadata, compress = \"xz\",\n    file = here(\"app_data\", \"sample_metadata.rda\")\n)\n\n\n\n4.3.3 genes.rda\nThis object contains a character vector of all genes in the Soybean Expression Atlas. Not all genes in the genome are included here, as genes with no detectable expression were not included in the expression matrix.\n\ngenes &lt;- rownames(se_atlas_gene)\n\nsave(\n    genes, compress = \"xz\",\n    file = here(\"app_data\", \"genes.rda\")\n)\n\n\n\n4.3.4 gene_descriptions.rda\nThis file contains a 2-column data frame with genes and their short descriptions. Descriptions will be obtained from PLAZA Dicots 5.0.\n\n# Create a data frame of all genes\ngenes_df &lt;- data.frame(\n    Gene = sort(genes)\n)\n\n# Get descriptions from PLAZA Dicots 5.0\ngene_descriptions &lt;- read_tsv(\n    file.path(\n        \"https://ftp.psb.ugent.be/pub/plaza/\",\n        \"plaza_public_dicots_05/Descriptions/gene_description.gma.csv.gz\"\n    ),\n    show_col_types = FALSE, skip = 8\n) |&gt;\n    select(\n        Gene = `#gene_id`, Description = id\n    ) |&gt;\n    mutate(Description = str_replace(Description, \".* - \", \"\")) |&gt;\n    right_join(genes_df) |&gt;\n    arrange(Gene)\n    \n# Save object\nsave(\n    gene_descriptions, compress = \"xz\",\n    file = here(\"app_data\", \"gene_descriptions.rda\")\n)\n\n\n\n4.3.5 tsne_coordinates.rda\nThis object contains t-SNE coordinates in a data frame with the following variables:\n\ntSNE1: numeric, x-axis coordinates.\ntSNE2: numeric, y-axis coordinates.\nBioSample: factor, BioSample ID.\nPart: factor, plant part.\nTreatment: factor, treatment.\nCultivar: factor, cultivar name.\nDOI: factor, publication DOI.\n\n\n# Load tSNE plot\nload(here(\"products\", \"plots\", \"p_tsne_optimal_perplexity.rda\"))\nload(here(\"products\", \"result_files\", \"sample_metadata.rda\"))\n\n# Create data frame\ntsne_coordinates &lt;- p_tsne_optimal_perplexity$data |&gt;\n    tibble::rownames_to_column(\"BioSample\") |&gt;\n    rename(\n        tSNE1 = X, \n        tSNE2 = Y,\n        Part = colour_by\n    ) |&gt;\n    select(tSNE1, tSNE2, BioSample, Part) |&gt;\n    mutate(\n        Part = str_to_title(Part),\n        Part = as.factor(Part),\n        BioSample = as.factor(BioSample)\n    ) |&gt;\n    inner_join(\n        sample_metadata |&gt;\n            select(BioSample, Treatment, Cultivar, DOI)\n    )\n\n# Save object\nsave(\n    tsne_coordinates, compress = \"xz\",\n    file = here(\"app_data\", \"tsne_coordinates.rda\")\n)\n\n\n\n4.3.6 gene_metadata.rda\nThis file contains a data frame with metadata on genes, including \\(\\tau\\) indices of tissue-specificity, expression-based classification, specific parts where the gene is expressed, protein domains, and a1.v1 IDs.\n\nbase_url &lt;- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05\"\n\n# Get ID correspondence between a4.v1 and a1.v1\nid_correspondence &lt;- read_tsv(\n    file.path(base_url, \"IdConversion/id_conversion.gma.csv.gz\"), \n    skip = 8, \n    show_col_types = FALSE\n) |&gt;\n    filter(id_type == \"synonym\") |&gt;\n    select(Gene = `#gene_id`, ID_a1.v1 = id)\n\n\n# Get InterPro domain annotation from PLAZA 5.0 Dicots\ninterpro &lt;- read_tsv(\n    file.path(base_url, \"InterPro/interpro.gma.csv.gz\"), skip = 8\n) |&gt;\n    select(Gene = `#gene_id`, Domain = motif_id) |&gt;\n    group_by(Gene) |&gt;\n    summarise(Domain = str_c(Domain, collapse = \",\"))\n\n# Get expression groups info\nload(here(\"products\", \"result_files\", \"final_classified_genes.rda\"))\nexpression_groups &lt;- final_classified_genes |&gt;\n    mutate(\n        Classification = as.factor(Classification),\n        Specific_parts = replace_na(Specific_parts, \"-\"),\n        Specific_parts = as.factor(Specific_parts)\n    )\n\n\n# Combine everything in a single data frame\ngene_metadata &lt;- expression_groups |&gt;\n    left_join(interpro) |&gt;\n    left_join(id_correspondence) |&gt;\n    mutate(\n        Domain = replace_na(Domain, \"-\"),\n        ID_a1.v1 = replace_na(ID_a1.v1, \"-\"),\n        Tau = signif(Tau, 3)\n    ) |&gt;\n    as.data.frame() \n\nsave(\n    gene_metadata, compress = \"xz\",\n    file = here(\"app_data\", \"gene_metadata.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating a directory with data for the Shiny app</span>"
    ]
  },
  {
    "objectID": "chapters/04_create_app_data_directory.html#session-information",
    "href": "chapters/04_create_app_data_directory.html#session-information",
    "title": "4  Creating a directory with data for the Shiny app",
    "section": "Session information",
    "text": "Session information\nThis document was created under the following conditions:\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.3.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21    2023-03-26 [1] CRAN (R 4.3.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating a directory with data for the Shiny app</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html",
    "href": "chapters/05_global_expression_analyses.html",
    "title": "5  Exploring global expression profiles",
    "section": "",
    "text": "5.1 Classifying genes by expression profiles\nHere, I will describe the code to:\nIn this section, I will calculate the \\(\\tau\\) index of tissue-specificity using log-transformed TPM values. Then, I will use the \\(\\tau\\) indices to classify genes into groups based on their expression profiles. First, let’s define a function to calculate \\(\\tau\\) for each gene.\n#' @param x A numeric vector with a gene's mean or median expression values\n#' across tissues\ncalculate_tau &lt;- function(x) {\n    \n    tau &lt;- NA\n    if(all(!is.na(x)) & min(x, na.rm = TRUE) &gt;= 0) {\n        tau &lt;- 0\n        if(max(x) != 0) {\n            x &lt;- (1-(x / max(x, na.rm = TRUE)))\n            tau &lt;- sum(x, na.rm = TRUE)\n            tau &lt;- tau / (length(x) - 1)\n        }\n    }\n    \n    return(tau)\n}\nNow, I will create an expression matrix with genes in row names and median expression per body part in column. This is what we need to calculate \\(\\tau\\). The parquet_dir directory below was downloaded from the FigShare repository associated with the publication (Almeida-Silva and Venancio 2023).\ndb &lt;- open_dataset(\n    \"~/Documents/app_data/parquet_dir\"\n)\n\n# Body parts to use - exclude \"whole plant\" and \"unknown\"\nparts &lt;- c(\n    \"root\", \"leaf\", \"shoot\", \"seedling\", \"seed\", \"cotyledon\", \"embryo\",\n    \"seed coat\", \"hypocotyl\", \"pod\", \"flower\", \"endosperm\", \"suspensor\",\n    \"nodule\", \"epicotyl\", \"radicle\", \"petiole\"\n)\n\n# Create a vector of all gene IDs and split it into a list of 100 vectors\nchunk &lt;- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))\n\ngenes &lt;- db |&gt;\n    select(Gene) |&gt;\n    unique() |&gt; \n    collect() |&gt;\n    pull(Gene) |&gt;\n    chunk(n = 100)\n\n\n# Get median expression per tissue\nmedian_per_part_long &lt;- Reduce(rbind, lapply(seq_along(genes), function(x) {\n    message(\"Working on set \", x)\n    df &lt;- db |&gt;\n        select(Gene, Sample, TPM, Part) |&gt;\n        filter(Part %in% parts) |&gt;\n        filter(Gene %in% genes[[x]]) |&gt;\n        group_by(Part, Gene) |&gt;\n        summarise(\n            Median = median(TPM)\n        ) |&gt;\n        ungroup() |&gt;\n        collect()\n    \n    return(df)\n}))\n\nmedian_per_part &lt;- pivot_wider(\n    median_per_part_long, names_from = Part, values_from = Median\n) |&gt;\n    tibble::column_to_rownames(\"Gene\") |&gt;\n    as.matrix()\nBefore calculating \\(\\tau\\), I will exclude genes that are not expressed in any part. Here, “expressed genes” will be considered genes with median TPM &gt;=1 in a body part.\n# Remove genes with median TPM &lt;1 in all body parts\nremove &lt;- apply(median_per_part, 1, function(x) all(x&lt;1))\nfinal_median_per_part &lt;- median_per_part[!remove, ]\n\n# Calculate Tau indices\ntau &lt;- apply(log2(final_median_per_part + 1), 1, calculate_tau)\nNow, I will classify genes into the following categories:\n# Create a long data frame of genes and medians per tissue\ngenes_median &lt;- reshape2::melt(median_per_part) |&gt;\n    dplyr::rename(Gene = Var1, Part = Var2, Median = value)\n\n# Create a data frame of genes and tau\ngenes_tau &lt;- data.frame(\n    Gene = names(tau),\n    Tau = as.numeric(tau)\n)\n\n# Classify genes\n## Classify genes into categories\nclassified_genes &lt;- left_join(genes_median, genes_tau) |&gt;\n    ## In how many parts is each gene expressed (TPM &gt;1) and stably expressed (TPM &gt;5)?\n    group_by(Gene) |&gt;\n    mutate(\n        N_expressed = sum(Median &gt; 1),\n        N_stable = sum(Median &gt; 5)\n    ) |&gt;\n    ## Classify genes\n    mutate(\n        Classification = case_when(\n            N_expressed == 0 ~ \"Null\",\n            N_stable == 0 ~ \"Weak\",\n            N_stable &gt;= 1 & Tau &lt; 0.85 ~ \"Broad\",\n            N_stable &gt;= 1 & Tau &gt;= 0.85 ~ \"Specific\"\n        )\n    ) |&gt;\n    ungroup()\n    \n## In which parts are body part-specific genes specifically expressed?\nspecific_genes_and_parts &lt;- classified_genes |&gt;\n    filter(Classification == \"Specific\" & Median &gt; 5) |&gt;\n    group_by(Gene) |&gt;\n    summarise(\n        Specific_parts = str_c(Part, collapse = \",\")\n    )\n    \n# Combine everything (classification + tissues) into a single data frame\nfinal_classified_genes &lt;- classified_genes |&gt;\n    select(Gene, Tau, Classification) |&gt;\n    distinct(Gene, .keep_all = TRUE) |&gt;\n    left_join(specific_genes_and_parts) |&gt;\n    arrange(Classification, Gene)\n\n# Exploring classification visually\np_genes_per_group &lt;- final_classified_genes |&gt;\n    janitor::tabyl(Classification) |&gt;\n    mutate(\n        Classification = factor(\n            Classification, levels = c(\"Null\", \"Weak\", \"Broad\", \"Specific\")\n        )\n    ) |&gt;\n    ggplot(aes(x = n, y = Classification)) +\n    geom_bar(stat = \"identity\", fill = ggsci::pal_jama()(4)) +\n    geom_text(aes(label = n), hjust = -0.2) +\n    theme_minimal() +\n    labs(\n        title = \"Number of genes per expression category\",\n        x = \"# of genes\", y = \"\"\n    ) +\n    xlim(0, 35000)\n\np_genes_per_group\nNow, let’s make an UpSet plot to see the patterns of body part specificity across genes.\n# Create a list of body parts and their specific genes\nspecific_genes_list &lt;- final_classified_genes |&gt;\n    filter(!is.na(Specific_parts)) |&gt;\n    select(Gene, Specific_parts) |&gt;\n    mutate(Specific_parts = str_to_title(Specific_parts)) |&gt;\n    separate_longer_delim(Specific_parts, delim = \",\") |&gt;\n    as.data.frame()\n\nspecific_genes_list &lt;- split(\n    specific_genes_list$Gene,\n    specific_genes_list$Specific_parts\n)\n\n# Create a combination matrix and filter it\ncomb_matrix &lt;- make_comb_mat(specific_genes_list)\nsizes &lt;- comb_size(comb_matrix)\nmat &lt;- comb_matrix[sizes &gt;= 10]\ndegree &lt;- comb_degree(mat)\npalette &lt;- ggsci::pal_npg()(length(unique(degree)))\n\np_upset &lt;- UpSet(\n    mat,\n    comb_col = palette[degree],\n    top_annotation = upset_top_annotation(\n        mat, add_numbers = TRUE, numbers_rot = 45\n    )\n)\n\np_upset\nWe can also plot a heatmap of median expression profiles per part for all part-specific genes.\n# Create expression matrix to plot with metadata\nts_genes &lt;- final_classified_genes |&gt;\n    filter(Classification == \"Specific\") |&gt;\n    pull(Gene)\n\ncolnames(median_per_part) &lt;- str_to_title(colnames(median_per_part))\nexp_matrix &lt;- log2(median_per_part[ts_genes, ] + 1)\n\n# Plot median expression profiles with annotation per group\npal &lt;- colorRampPalette(RColorBrewer::brewer.pal(9, \"Greens\"))(100)\np_heatmap_median &lt;- ComplexHeatmap::pheatmap(\n    t(exp_matrix),\n    name = \"Log2 TPM\",\n    main = \"Median expression of body part-specific genes\",\n    show_rownames = TRUE,\n    show_colnames = FALSE,\n    color = pal\n)\n\np_heatmap_median",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html#classifying-genes-by-expression-profiles",
    "href": "chapters/05_global_expression_analyses.html#classifying-genes-by-expression-profiles",
    "title": "5  Exploring global expression profiles",
    "section": "",
    "text": "Null expression: median TPM &lt;1 in all tissues.\nWeak expression: median TPM &lt;5 in all tissues.\nBroadly expressed: Tau &lt;0.85.\nBody part-specific: Tau &gt;=0.85.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html#functional-enrichment-of-part-specific-genes",
    "href": "chapters/05_global_expression_analyses.html#functional-enrichment-of-part-specific-genes",
    "title": "5  Exploring global expression profiles",
    "section": "5.2 Functional enrichment of part-specific genes",
    "text": "5.2 Functional enrichment of part-specific genes\nHere, I will perform a functional enrichment analysis to find overrepresented GO terms, protein domains, and MapMan bins in the sets of part-specific genes.\nI will start by downloading and processing the functional annotation data from PLAZA 5.0 Dicots.\n\n# Download functional annotation from PLAZA 5.0\nbase_url &lt;- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05\"\n\n## GO\ngo &lt;- read_tsv(\n    file.path(base_url, \"GO/go.gma.csv.gz\"), skip = 8\n) \ngo &lt;- list(\n    term2gene = go |&gt; select(GO = go, Gene = `#gene_id`),\n    term2name = go |&gt; select(GO = go, Description = description)\n)\n\n## InterPro domains\ninterpro &lt;- read_tsv(\n    file.path(base_url, \"InterPro/interpro.gma.csv.gz\"), skip = 8\n) \ninterpro &lt;- list(\n    term2gene = interpro |&gt; select(InterPro = motif_id, Gene = `#gene_id`),\n    term2name = interpro |&gt; select(InterPro = motif_id, Description = description)\n)\n\n## MapMan\nmapman &lt;- read_tsv(\n    file.path(base_url, \"MapMan/mapman.gma.csv.gz\"), skip = 8\n) \nmapman &lt;- list(\n    term2gene = mapman |&gt; select(MapMan = mapman, Gene = gene_id),\n    term2name = mapman |&gt; select(MapMan = mapman, Description = desc)\n)\n\nNext, I will perform overrepresentation analyses for each set of part-specific genes (i.e,, elements of specific_genes_list). As background, we will use all genes that are expressed in at least one body part.\n\n# Define background\nbackground &lt;- final_classified_genes |&gt;\n    filter(Classification != \"Null\") |&gt;\n    pull(Gene) |&gt; \n    unique()\n\n# Perform ORA\nenrich_results &lt;- lapply(specific_genes_list, function(x) {\n    \n    go_enrich &lt;- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = go$term2gene, TERM2NAME = go$term2name\n    )\n    \n    interpro_enrich &lt;- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = interpro$term2gene, TERM2NAME = interpro$term2name\n    )\n    \n    mapman_enrich &lt;- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = mapman$term2gene, TERM2NAME = mapman$term2name\n    )\n    \n    final_df &lt;- rbind(\n        as.data.frame(go_enrich) |&gt; mutate(Category = \"GO\"), \n        as.data.frame(interpro_enrich) |&gt; mutate(Category = \"InterPro\"), \n        as.data.frame(mapman_enrich) |&gt; mutate(Category = \"MapMan\")\n    )\n    return(final_df)\n})\n\n# Combine results into a single data frame\nenrichment_df &lt;- Reduce(rbind, lapply(seq_along(enrich_results), function(x) {\n    \n    part &lt;- names(enrich_results)[x]\n    df &lt;- enrich_results[[x]]\n    df$Part &lt;- part\n    \n    return(df)\n}))\n\nenrichment_df &lt;- enrichment_df |&gt;\n    filter(p.adjust &lt;= 0.01)\n\nwrite_tsv(\n    enrichment_df, \n    file = here(\"products\", \"tables\", \"enrichment_df.tsv\")\n)\n\nAfter a careful inspection of the enrichment results, I found the following enriched processes for each set of part-specific genes:\n\nCotyledon: seed maturation, seed germination, long-chain fatty acid biosynthesis, gibberelin biosynthesis, proteinase inhibitors, lipoxygenase, cupin, lipid droplets, response to dessication, oxylipin biosynthesis, diterpenoid biosynthesis, response to ABA.\nEmbryo: seed maturation, seed germination, lipid droplet, response to ABA, response to dessication, long-chain fatty acid biosynthesis, proteinase inhibitors, oxylipin biosynthesis, oleosin, cupin, chaperones.\nEndosperm: lipid transport, xyloglucan metabolism, hemicellulose metabolism, lipid transfer protein, pectinesterase inhibitor, fructosidase inhibitor, invertase inhibitor, glycoside hydrolase 16, beta-1,3-glucanase, defensin.\nEpicotyl: SAUR, arabinogalactan protein, FAS1 domain, metallopeptidase, ubiquitin ligase, programmed cell death.\nFlower: pollen wall assembly, cell wall modification, carboxylic ester hydrolase, floral identity, floral development, stamen development, androecium development, pollen tube development, mucilage pectin biosynthesis, pectate lyase, carpel development, floral meristem determinancy, gynoecium development, cell tip growth, actin filament organization, anther wall tapetum development, plant ovule development, cytokinin catabolism, very-long-chain 3-ketoacyl-CoA synthase, glycoside hydrolase 28, SWEET sugar transporter, thiolase, cutin synthase.\nHypocotyl: peroxidase, haem peroxidase, cytochrome P450 superfamily, sugar transporter ERD6, iron binding, cupin.\nLeaf: chloroplast localization, terpene synthase, WEB family, proteinase inhibitor I3, glucose-1-phosphate adenylyltransferase, starch metabolism.\nNodule: peroxidase, leucine biosynthesis, MFS transporter superfamily, auxin biosynthesis, Nin-like superfamily, symbiosis signaling, germin.\nPetiole: NAD+ nucleosidase, diterpenoid biosynthesis, SAUR, growth factor activity, FAS1 domain, TIR domain, NB-ARC, effector-triggered immunity, cell wall organization.\nPod: fruit ripening, glyoxylate metabolism, phosphatidylethanolamine-binding protein family, NB-ARC, phospholipid/glycerol acyltransferase, apoptotic protease-activating factors.\nRadicle: lipid storage, seed maturation, seed germination, anaerobic respiration, seedling development, heat-shock protein, proteinase inhibitor, ethylene insensitive 3 family, oleosin.\nRoot: peroxidase, Casparian strip membrane protein, secondary cell wall, cell-cell junction assembly, phenylpropanoid biosynthesis, lignin metabolism, response to cytokinin, ABC transporter, cupin, laccase, lipid transfer protein, glycoside hydrolase 1, Fe(2+)-2OG dioxygenase, polyketide synthase, CAP domain, phytocyanin domain.\nSeed: seed germination, seed maturation, lipid storage, lipid droplets, proteinase inhibitor, protein storage, olylipin biosynthesis, long-chain fatty acid biosynthesis, oleosin.\nSeed coat: seed coat development, flavonoid biosynthesis, amine-lyase activity, xenobiotic transport, lignin catabolism, SWEET sugar transporter, defensin, glycoside hydrolase 27, expansin, proteinase inhibitor.\nSeedling: glyoxylate metabolism, peroxidase, cytochrome P450, cupin, lipid transfer protein, sugar/inosotil transporter, expansin, FAD-linked oxidase.\nShoot: terpene synthase, SAUR, metallopeptidase, WEB family, SPX family.\nSuspensor: root meristem growth, growth factor, defensin-like protein, lipid localization.\n\nTo summarize the results in a clearer way, let’s visualize the biological processes associated with each part as a presence/absence heatmap.\n\n# Create a list of vectors with terms associated with each gene set\nterms_list &lt;- list(\n    Cotyledon = c(\n        \"seed maturation\", \"seed germination\", \"gibberelin biosynthesis\",\n        \"long-chain fatty acid biosynthesis\", \"proteinase inhibitor\",\n        \"lipoxygenase\", \"cupin\", \"lipid droplets\", \"response to dessication\",\n        \"oxylipin biosynthesis\", \"diterpenoid biosynthesis\", \"response to ABA\"\n    ),\n    Embryo = c(\n        \"seed maturation\", \"seed germination\", \"lipid droplets\", \n        \"response to ABA\", \"long-chain fatty acid biosynthesis\",\n        \"proteinase inhibitor\", \"oxylipin biosynthesis\", \"oleosin\",\n        \"cupin\", \"chaperone\"\n    ),\n    Endosperm = c(\n        \"lipid transport\", \"xyloglucan metabolism\", \"hemicellulose metabolism\",\n        \"lipid transfer protein\", \n        \"pectinesterase inhibitor\", \n        \"invertase inhibitor\",\n        \"beta-1,3-glucanase\", \"defensin\"\n    ),\n    Epicotyl = c(\n        \"SAUR\", \"arabinogalactan protein\",\n        \"metallopeptidase\", \"programmed cell death\"\n    ),\n    Flower = c(\n        \"cell wall organization\", \"floral identity\", \n        \"stamen development\", \"androecium development\", \n        \"pollen tube development\", \"mucilage pectin biosynthesis\", \n        \"carpel development\", \n        \"gynoecium development\", \n        \"anther wall tapetum development\",\n        \"plant ovule development\", \"cytokinin catabolism\", \n        \"3-ketoacyl-CoA synthase\", \"glycoside hydrolase 28\",\n        \"SWEET sugar transporter\", \"thiolase\", \"cutin synthase\"\n    ),\n    Hypocotyl = c(\n        \"peroxidase\", \"haem peroxidase\", \"cytochrome P450\",\n        \"sugar transporter ERD6\", \"cupin\"\n    ),\n    Leaf = c(\n        \"chloroplast localization\", \"terpene synthase\", \"WEB family\",\n        \"proteinase inhibitor\", \"G1P adenylyltransferase\",\n        \"starch metabolism\"\n    ),\n    Nodule = c(\n        \"peroxidase\", \"leucine biosynthesis\", \"auxin biosynthesis\", \n        \"Nin-like superfamily\", \"symbiosis signaling\", \"germin\"\n    ),\n    Petiole = c(\n        \"diterpenoid biosynthesis\", \"SAUR\", \n        \"growth factor\", \"TIR domain\", \"NB-ARC\", \n        \"cell wall organization\"\n    ),\n    Pod = c(\n        \"fruit ripening\", \"glyoxylate metabolism\", \n        \"NB-ARC\",\n        \"phospholipid/glycerol acyltransferase\", \n        \"apoptotic protease-activating factors\"\n    ),\n    Radicle = c(\n        \"seed maturation\", \"seed germination\", \n        \"anaerobic respiration\", \"seedling development\", \"heat-shock protein\", \n        \"proteinase inhibitor\", \"ethylene insensitive 3 family\", \"oleosin\"\n    ),\n    Root = c(\n        \"peroxidase\", \"Casparian strip membrane protein\", \"secondary cell wall\",\n        \"cell-cell junction assembly\", \"phenylpropanoid biosynthesis\", \n        \"lignin metabolism\", \"response to cytokinin\", \"ABC transporter\", \n        \"cupin\", \"laccase\", \"lipid transfer protein\", \"glycoside hydrolase 1\",\n        \"Fe(2+)-2OG dioxygenase\", \"polyketide synthase\", \n        \"phytocyanin domain\"\n    ),\n    `Seed Coat` = c(\n        \"seed coat development\", \"flavonoid biosynthesis\", \n        \"lignin catabolism\", \n        \"SWEET sugar transporter\", \"defensin\", \"glycoside hydrolase 27\", \n        \"expansin\", \"proteinase inhibitor\"\n    ),\n    Seedling = c(\n        \"glyoxylate metabolism\", \"peroxidase\", \"cytochrome P450\", \n        \"cupin\", \"lipid transfer protein\", \"sugar/inosotil transporter\",\n        \"expansin\"\n    ),\n    Shoot = c(\n        \"terpene synthase\", \"SAUR\", \"metallopeptidase\", \"WEB family\"\n    ),\n    Suspensor = c(\n        \"root meristem growth\", \"growth factor\", \"defensin\",\n        \"lipid localization\"\n    )\n) \n\n# Create a binary (i.e., presence/absence) matrix from list\npam &lt;- ComplexHeatmap::list_to_matrix(terms_list)\n\n# Plot heatmap\np_heatmap_terms_pav &lt;- ComplexHeatmap::pheatmap(\n    pam, color = c(\"grey90\", \"grey10\"),\n    border_color = \"white\",\n    name = \"Presence/Absence\",\n    main = \"Enriched terms for part-specific genes\",\n    fontsize_row = 9,\n    breaks = c(0, 0.5, 1),\n    legend_breaks = c(0, 1)\n)\n\n# Change height and width of the column and row dendrograms, respectively\np_heatmap_terms_pav@row_dend_param$width &lt;- unit(5, \"mm\")\np_heatmap_terms_pav@column_dend_param$height &lt;- unit(5, \"mm\")\n\np_heatmap_terms_pav",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html#identifying-part-specific-transcription-factors",
    "href": "chapters/05_global_expression_analyses.html#identifying-part-specific-transcription-factors",
    "title": "5  Exploring global expression profiles",
    "section": "5.3 Identifying part-specific transcription factors",
    "text": "5.3 Identifying part-specific transcription factors\nLastly, I will identify transcription factors among part-specific genes and explore their families to find the putative regulators of each part’s transcriptional programs.\n\n# Get TF list from PlantTFDB\ngma_tfs &lt;- read_tsv(\n    \"http://planttfdb.gao-lab.org/download/TF_list/Gma_TF_list.txt.gz\"\n) |&gt;\n    select(Gene = Gene_ID, Family) |&gt;\n    distinct(Gene, .keep_all = TRUE)\n    \n# Count number of TFs per family among part-specific genes\ntf_counts &lt;- inner_join(\n    final_classified_genes |&gt; dplyr::filter(Classification == \"Specific\"),\n    gma_tfs\n) |&gt;\n    select(Gene, Family, Specific_parts) |&gt;\n    mutate(Specific_parts = str_to_title(Specific_parts)) |&gt;\n    separate_longer_delim(Specific_parts, delim = \",\") |&gt;\n    group_by(Specific_parts) |&gt;\n    count(Family, .drop = FALSE) |&gt;\n    pivot_wider(names_from = Family, values_from = n) |&gt;\n    tibble::column_to_rownames(\"Specific_parts\") |&gt;\n    as.matrix()\n    \ntf_counts[is.na(tf_counts)] &lt;- 0\n\n# Plot heatmap\npal &lt;- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\"))(100)[1:70]\np_heatmap_specific_tfs &lt;- ComplexHeatmap::pheatmap(\n    log2(tf_counts + 1),\n    color = pal,\n    display_numbers = tf_counts,\n    border_color = \"gray90\",\n    name = \"Log2 counts\",\n    main = \"Transcription factors among part-specific genes\"\n)\n\np_heatmap_specific_tfs\n\n\n\n\n\n\n\n\nTo wrap it all up, I will save the objects with plots and important results to files, so that they can be easily explored later.\n\nsave(\n    median_per_part, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"median_per_part.rda\")\n)\n\nsave(\n    final_classified_genes, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"final_classified_genes.rda\")\n)\n\nsave(\n    enrichment_df, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"enrichment_df.rda\")\n)\n\nsave(\n    p_genes_per_group, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_genes_per_group.rda\")\n)\n\nsave(\n    p_upset, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset.rda\")\n)\n\nsave(\n    p_heatmap_median, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_median.rda\")\n)\n\nsave(\n    p_heatmap_terms_pav, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_terms_pav.rda\")\n)\n\nsave(\n    p_heatmap_specific_tfs, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_specific_tfs.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html#session-information",
    "href": "chapters/05_global_expression_analyses.html#session-information",
    "title": "5  Exploring global expression profiles",
    "section": "Session information",
    "text": "Session information\nThis document was created under the following conditions:\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.0)\n aplot                  0.1.10    2023-03-08 [1] CRAN (R 4.3.0)\n arrow                * 11.0.0.3  2023-03-08 [1] CRAN (R 4.3.0)\n assertthat             0.2.1     2019-03-21 [1] CRAN (R 4.3.0)\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase                2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BioNERO              * 1.9.3     2023-06-20 [1] Github (almeidasilvaf/BioNERO@cd9bec2)\n Biostrings           * 2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n clusterProfiler      * 4.8.1     2023-05-03 [1] Bioconductor\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap       * 2.16.0    2023-04-25 [1] Bioconductor\n cowplot                1.1.1     2020-12-30 [1] CRAN (R 4.3.0)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.31    2022-12-11 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n DOSE                   3.26.1    2023-05-03 [1] Bioconductor\n downloader             0.4       2015-07-09 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n enrichplot             1.20.0    2023-04-25 [1] Bioconductor\n evaluate               0.20      2023-01-17 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n fastmatch              1.1-3     2021-07-23 [1] CRAN (R 4.3.0)\n fgsea                  1.26.0    2023-04-25 [1] Bioconductor\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges          1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggforce                0.4.1     2022-10-04 [1] CRAN (R 4.3.0)\n ggfun                  0.0.9     2022-11-21 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggplotify              0.1.0     2021-09-02 [1] CRAN (R 4.3.0)\n ggraph                 2.1.0     2022-10-09 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.0)\n ggtree                 3.8.0     2023-04-25 [1] Bioconductor\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n GOSemSim               2.26.0    2023-04-25 [1] Bioconductor\n graphlayouts           1.0.0     2023-05-01 [1] CRAN (R 4.3.0)\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.0)\n gson                   0.1.0     2023-03-07 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n HDO.db                 0.99.1    2023-06-20 [1] Bioconductor\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n janitor                2.2.0     2023-02-02 [1] CRAN (R 4.3.0)\n jsonlite               1.8.4     2022-12-06 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.42      2023-01-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics         1.12.2    2023-06-09 [1] Bioconductor\n matrixStats            1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork            * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n planttfhunter        * 0.99.2    2023-06-21 [1] Github (almeidasilvaf/planttfhunter@6fb8551)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n polyclip               1.10-4    2022-10-20 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n qvalue                 2.32.0    2023-04-25 [1] Bioconductor\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.21      2023-03-26 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n scatterpie             0.2.1     2023-06-07 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shadowtext             0.1.2     2022-04-22 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n snakecase              0.11.0    2019-05-25 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment   1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidygraph              1.2.3     2023-02-01 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidytree               0.4.2     2022-12-18 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n treeio                 1.24.1    2023-05-31 [1] Bioconductor\n tweenr                 2.0.2     2022-09-06 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.2     2023-04-19 [1] CRAN (R 4.3.0)\n viridis                0.6.2     2021-10-13 [1] CRAN (R 4.3.0)\n viridisLite            0.4.2     2023-05-02 [1] CRAN (R 4.3.0)\n vroom                  1.6.3     2023-04-28 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector              * 0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n yulab.utils            0.0.6     2022-12-20 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/05_global_expression_analyses.html#references",
    "href": "chapters/05_global_expression_analyses.html#references",
    "title": "5  Exploring global expression profiles",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, and Thiago Venancio. 2023. “Soybean Expression Atlas v2,” March. https://doi.org/10.6084/m9.figshare.22448341.v1.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exploring global expression profiles</span>"
    ]
  },
  {
    "objectID": "chapters/appendices.html",
    "href": "chapters/appendices.html",
    "title": "Appendices",
    "section": "",
    "text": "Creating paper figures\nBelow you can find the code used to create the figures in the paper.\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(here)\nlibrary(maps)\nlibrary(magick)\nlibrary(ggplotify)\nlibrary(ggpubr)\nset.seed(123)\n\n# ---- Figure 1 ----\n## Load data\nload(here(\"data\", \"metadata_atlas_v2_downloaded.rda\"))\nload(here(\"products\", \"result_files\", \"fastp_stats.rda\"))\nload(here(\"products\", \"result_files\", \"mapping_rate_salmon.rda\"))\n\nfastp_sample_stats &lt;- left_join(\n    fastp_stats, metadata_atlas_v2_downloaded[, c(\"BioSample\", \"Run\")],\n    by = c(\"Sample\" = \"Run\")\n) |&gt;\n    distinct(BioSample, .keep_all = TRUE)\n\n##----1A: Workflow----\np_1a &lt;- ggplot() + theme_void() # workflow image will be manually added later\n\n##----1B: Barplot of samples that passed and failed QC----\ndata_1b &lt;- data.frame(\n    Group = c(\"Initial\", \"Checkpoint 1\", \"Checkpoint 2\"),\n    Frequency = c(\n        # Initial\n        length(unique(metadata_atlas_v2_downloaded$BioSample)),\n        # Passed checkpoint 1 (sequence QC)\n        fastp_stats |&gt;\n            filter(after_meanlength &gt;= 40) |&gt;\n            filter(after_q20rate &gt;= 0.8) |&gt;\n            left_join(metadata_atlas_v2_downloaded, by = c(\"Sample\" = \"Run\")) |&gt;\n            pull(BioSample) |&gt; \n            unique() |&gt; \n            length(),\n        # Passed checkpoint 2 (mapping rates)\n        mapping_rate |&gt;\n            filter(Mapping_rate &gt;= 50) |&gt; \n            pull(BioSample) |&gt;\n            unique() |&gt;\n            length()\n    )\n) |&gt;\n    mutate(Difference = c(NA, diff(Frequency)))\n\np_1b &lt;- ggplot(data_1b, aes(y = fct_reorder(Group, Frequency), x = Frequency)) +\n    geom_bar(\n        stat = \"identity\", fill = c(\"dodgerblue3\", \"brown2\", \"firebrick\"),\n        color = \"black\"\n    ) +\n    labs(\n        title = \"Number of BioSamples after each filtering step\",\n        subtitle = \"Numbers inside bars indicate removed samples\",\n        y = \"\", x = \"Number of samples\"\n    ) +\n    geom_text(aes(label = Frequency), hjust = -0.3) +\n    geom_text(aes(label = Difference), hjust = 1.5, color = \"white\", fontface = \"bold\") +\n    theme_bw() +\n    xlim(0, 8000) \n\n\n##----1C: Distribution of read length\np_1c &lt;- fastp_sample_stats |&gt;\n    filter(after_meanlength &lt;= 150) |&gt;\n    ggplot(aes(x = after_meanlength)) +\n    geom_density(fill = \"grey85\", color = \"gray30\") +\n    theme_bw() +\n    labs(\n        title = \"Distribution of mean read lengths per sample\",\n        subtitle = \"Dashed line indicates the minimum length in checkpoint 1\",\n        x = \"\", y = \"Density\"\n    ) +\n    geom_vline(xintercept = 40, color = \"firebrick\", linetype = \"dashed\")\n    \n\n##----1D: Distribution of Q20 rates----\np_1d &lt;- fastp_sample_stats |&gt;\n    filter(after_meanlength &lt;= 150) |&gt;\n    mutate(after_q20rate = as.numeric(after_q20rate)) |&gt;\n    ggplot(aes(x = after_q20rate)) +\n    geom_density(fill = \"lightskyblue1\", color = \"gray30\") +\n    theme_bw() +\n    geom_vline(xintercept = 0.8, color = \"firebrick\", linetype = \"dashed\") +\n    labs(\n        title = \"Distribution of Q20 rates per sample\",\n        subtitle = \"Dashed line indicates the minimum rate in checkpoint 1\",\n        x = \"\", y = \"Density\"\n    )\n\np_1d\n\n\n##----1E: Distribution of quasi-mapping rates----\np_1e &lt;- mapping_rate |&gt;\n    mutate(Mapping_rate = Mapping_rate / 100) |&gt;\n    ggplot(aes(x = Mapping_rate)) +\n    geom_density(fill = \"lemonchiffon2\", color = \"gray30\") +\n    theme_bw() +\n    geom_vline(xintercept = 0.5, color = \"firebrick\", linetype = \"dashed\") +\n    labs(\n        title = \"Distribution of mapping rates per sample\",\n        subtitle = \"Dashed line indicates the rate in checkpoint 2\",\n        x = \"\", y = \"Density\"\n    )\n\n\n##----1F: Distribution of number of reads---\np_1f &lt;- fastp_sample_stats |&gt;\n    filter(after_meanlength &lt;= 150) |&gt;\n    filter(after_nreads &lt;= 1600 * 1e6 & after_nreads &gt; 0) |&gt;\n    mutate(after_nreads = after_nreads / 1e6) |&gt;\n    ggplot(aes(x = after_nreads)) +\n    geom_density(fill = \"darkseagreen3\", color = \"gray30\") +\n    theme_bw() +\n    labs(\n        title = \"Distribution of number of reads (in millions) per sample\",\n        x = \"\", y = \"Density\"\n    )\n\n## Combine plots\nfig1 &lt;- wrap_plots(\n    wrap_plots(\n        p_1a, \n        p_1b + theme(\n            axis.text.y = element_text(size = 12)\n        ), \n        heights = c(4, 1), nrow = 2\n    ), \n    wrap_plots(\n        p_1c, p_1d, p_1e, p_1f,\n        ncol = 1\n    )\n) +\n    plot_annotation(tag_levels = \"A\")\n\n## Combine workflow (fig 1A) and other panels\ntemp_fig1 &lt;- tempfile(fileext = \".pdf\")\nggsave(\n    fig1, filename = temp_fig1,\n    width = 11, height = 13\n)\n\nfig1a &lt;- image_read_svg(\n    here(\"products\", \"figs\", \"atlas_workflow_paper.svg\")\n)\nfig1rest &lt;- image_read_pdf(temp_fig1)\n\nfig1_final &lt;- image_composite(\n    fig1rest, image_scale(fig1a, \"x2900\")\n)\n\n## Save figure 1\nimage_write(\n    fig1_final, \n    path = here(\"products\", \"figs\", \"figure1.pdf\"),\n    format = \"pdf\"\n)\n\nimage_write(\n    fig1_final, \n    path = here(\"products\", \"figs\", \"figure1.png\"),\n    format = \"png\",\n    density = 300\n)\n\n\n#----Figure 2-----\nload(here(\"products\", \"plots\", \"p_tsne_optimal_perplexity.rda\"))\nload(here(\"products\", \"plots\", \"p_umap_optimal_nneighbors.rda\"))\nload(here(\"products\", \"plots\", \"p_samples_per_body_part.rda\"))\n\n##----2A: Barplot of number of samples per tissue\nparts &lt;- png::readPNG(\n    here(\"products\", \"figs\", \"soybean_parts_colored.png\"),\n    native = TRUE\n)\n\n\np_2a &lt;- p_samples_per_body_part$data |&gt;\n    left_join(\n        data.frame(\n            Part = c(\n                \"Leaf\", \"Seed\", \"Seed Coat\", \"Root\", \"Embryo\", \"Cotyledon\",\n                \"Shoot\", \"Hypocotyl\", \"Pod\", \"Flower\", \"Endosperm\", \n                \"Suspensor\", \"Seedling\", \"Nodule\"\n            ),\n            n_v1 = c(\n                601, 158, 125, 100, 81, 48, 42, 24, 23, 18, 10, 9, 3, 2\n            )\n        )\n    ) |&gt;\n    mutate(\n        new_n = n - n_v1,\n        new_n = replace_na(new_n, 0),\n        Part = factor(Part, levels = levels(p_samples_per_body_part$data$Part))\n    ) |&gt;\n    mutate(\n        label = case_when(\n            new_n &gt; 0 ~ paste0(\"**\", n, \"**\", \" (+\", new_n, \")\"),\n            TRUE ~ paste0(\"**\", n, \"**\", \"   \")\n        )\n    ) |&gt;\n    ggplot(aes(x = n, y = Part)) +\n    ggpubr::background_image(\n        png::readPNG(\n            here(\"products\", \"figs\", \"bg_gradient_left_right.png\"),\n            native = TRUE\n        )\n    ) +\n    geom_bar(stat = \"identity\", fill = \"#719f2d\") +\n    labs(\n        title = \"Number of samples per body part\",\n        subtitle = \"Numbers in parentheses represent newly added samples\",\n        x = \"Number of samples\", y = \"\"\n    ) +\n    ggtext::geom_richtext(\n        aes(label = label), hjust = -0.1, fill = NA, label.color = NA,\n        size = 4.5\n    ) +\n    ggpubr::theme_pubr() +\n    scale_x_continuous(limits = c(0, 2300), expand = c(0, 0)) +\n    inset_element(\n        parts,\n        left = 0.25,\n        top = 0.95,\n        right = 1,\n        bottom = 0.25\n    ) +\n    theme_void() \n\n\n##----2B: t-SNE representation of samples----\np_2b &lt;- p_tsne_optimal_perplexity$data |&gt;\n    mutate(colour_by = str_to_title(colour_by)) |&gt;\n    # Plot\n    ggplot(aes(x = X, y = Y, color = colour_by)) +\n    ggpubr::background_image(\n        png::readPNG(\n            here(\"products\", \"figs\", \"bg_gradient_bottom_top.png\"),\n            native = TRUE\n        )\n    ) +\n    geom_point(alpha = 0.5) +\n    ggsci::scale_color_d3(palette = \"category20\") +\n    theme(\n        legend.key = element_blank(),\n        legend.position = \"right\"\n    ) +\n    labs(\n        color = \"Body part\",\n        title = \"t-SNE representation of all samples\",\n        subtitle = \"Top 8 principal components, perplexity = 60\",\n        x = \"t-SNE 1\", y = \"t-SNE 2\"\n    )\n\n\np_2b\n\n\n##----2C: UMAP representation of samples----\np_2c &lt;- p_umap_optimal_nneighbors$data |&gt;\n    mutate(colour_by = str_to_title(colour_by)) |&gt;\n    # Plot\n    ggplot(aes(x = X, y = Y, color = colour_by)) +\n    ggpubr::background_image(\n        png::readPNG(\n            here(\"products\", \"figs\", \"bg_gradient_bottom_top.png\"),\n            native = TRUE\n        )\n    ) +\n    geom_point(alpha = 0.5) +\n    ggsci::scale_color_d3(palette = \"category20\") +\n    theme(\n        legend.key = element_blank(),\n        legend.position = \"right\"\n    ) +\n    labs(\n        color = \"Body part\",\n        x = \"UMAP 1\", y = \"UMAP 2\",\n        title = \"UMAP representation of all samples\",\n        subtitle = \"Top 8 principal components, n_neighbors = 30\"\n    )\n\np_2c\n\n\n## Combine plots\nfig2 &lt;- wrap_plots(\n    p_2a,\n    wrap_plots(p_2b, p_2c, ncol = 1) +\n        plot_layout(guides = \"collect\"),\n    ncol = 2, widths = c(1.5, 1)\n) +\n    plot_annotation(tag_levels = list(c(\"A\", \"\", \"B\", \"C\")))\n\nfig2\n\n\n## Save figure 2\nggsave(\n    fig2, filename = here(\"products\", \"figs\", \"figure2.png\"),\n    width = 16, height = 10, dpi = 300\n)\n\nggsave(\n    fig2, filename = here(\"products\", \"figs\", \"figure2.pdf\"),\n    width = 14, height = 10\n)\n\n#----Figure 3----\n## Load data\nload(here(\"products\", \"plots\", \"p_heatmap_median.rda\"))\nload(here(\"products\", \"plots\", \"p_heatmap_specific_tfs.rda\"))\nload(here(\"products\", \"plots\", \"p_upset.rda\"))\nload(here(\"products\", \"plots\", \"p_genes_per_group.rda\"))\n\n## Enhance graphical details\n### Change title of barplot\np_genes_per_group &lt;- p_genes_per_group + \n    labs(title = \"Genes per expression group\") +\n    xlim(0, 40000)\n\n### Add title to UpSet plot\np_upset@column_title &lt;- \"Overlap among body part-specific genes\"\n\n### Change title and fontface of heatmap from bold to plain\np_heatmap_median@column_title_param$gp$font &lt;- 1\np_heatmap_median@column_title &lt;- \"Expression of body part-specific genes\"\n\n### Change fontface of heatmap from bold to plain\np_heatmap_specific_tfs@column_title_param$gp$font &lt;- 1\n\n## Combine plots\nfig3 &lt;- ggarrange(\n    ## First row\n    ggarrange(\n        p_genes_per_group, as.ggplot(p_upset), nrow = 1, \n        widths = c(1,3), labels = list(\"A\", \"B\")\n    ),\n    ## Second row\n    ggarrange(\n        as.ggplot(p_heatmap_median), as.ggplot(p_heatmap_specific_tfs), \n        nrow = 1, widths = c(1, 2), labels = list(\"C\", \"D\")\n    ),\n    nrow = 2\n)\n\n## Save figure 3\nggsave(\n    fig3, \n    filename = here(\"products\", \"figs\", \"figure3.pdf\"),\n    width = 15, height = 12\n)\n\nimage_read_pdf(here(\"products\", \"figs\", \"figure3.pdf\")) |&gt;\n    image_write(\n        path = here(\"products\", \"figs\", \"figure3.png\"),\n        density = 300\n    )\n\n\n#----Figure 4-----\n## Load data\nload(here(\"products\", \"plots\", \"p_map_samples_per_country.rda\"))\nload(here(\"products\", \"plots\", \"p_barplot_samples_per_country.rda\"))\nload(here(\"products\", \"plots\", \"p_nsamples_over_time_cumsum.rda\"))\nload(here(\"products\", \"plots\", \"p_seqtech_layout_count.rda\"))\ntop_producers &lt;- c(\n    \"Brazil\", \"USA\", \"Argentina\", \"China\", \"India\", \"Paraguay\", \"Canada\"\n)\n\n##----4A and 4B: World map + samples per country----\np_4ab &lt;- wrap_plots(\n    p_map_samples_per_country, \n    p_barplot_samples_per_country +\n        labs(\n            subtitle = \"Blue bars indicate world leaders in soybean production\"\n        ) +\n        theme(\n            axis.text.y = element_text(size = 11)\n        ),\n    widths = c(2, 1)\n)\n\n##----4C: Time-series: number of samples over time-----\np_4c &lt;- p_nsamples_over_time_cumsum\np_4c$layers[[3]] &lt;- NULL\np_4c &lt;- p_4c +\n    labs(\n        subtitle = \"Samples that were filtered out in the SEA v2 were not included\"\n    ) +\n    annotate(\n        \"text\",\n        x = as.Date(\"2015-01-01\"), y = 3500,\n        label = \"Last download for the SEA v1\",\n        color = \"gray20\"\n    )\n\n\n##----4D: sequencing stats----\np_4d &lt;- p_seqtech_layout_count +\n    labs(title = \"Summary sequencing statistics\") +\n    theme(\n        axis.text.y = element_text(size = 11),\n        strip.text.y = element_text(size = 11)\n    )\n\n\n## Combine plots\nfig4 &lt;- wrap_plots(\n    p_4ab,\n    wrap_plots(p_4c, p_4d),\n    nrow = 2\n) +\n    plot_annotation(tag_levels = list(c(\"A\", \"B\", \"C\", \"D\")))\n\n\n## Save figure 4\nggsave(\n    fig4, filename = here(\"products\", \"figs\", \"figure4.png\"),\n    width = 15, height = 12, dpi = 300\n)\n\nggsave(\n    fig4, filename = here(\"products\", \"figs\", \"figure4.pdf\"),\n    width = 13, height = 12\n)\n\n\n#----Supplementary Figure S1----------------------------------------------------\n## Load data\nload(here(\"products\", \"plots\", \"p_pca_percent_var.rda\"))\nload(here(\"products\", \"plots\", \"p_fit_mean_var.rda\"))\n\n## Combine plots\nsf1 &lt;- wrap_plots(p_fit_mean_var, p_pca_percent_var) +\n    plot_annotation(tag_levels = \"A\")\n\n## Save figure    \nggsave(\n    sf1, \n    file = here(\"products\", \"figs\", \"supplementary_figure1.png\"),\n    width = 15, height = 9, dpi = 300\n)\n\nggsave(\n    sf1, \n    file = here(\"products\", \"figs\", \"supplementary_figure1.pdf\"),\n    width = 15, height = 9\n)\n\n\n#----Supplementary Figure S2----------------------------------------------------\n## Load data\nload(here(\"products\", \"plots\", \"p_heatmap_terms_pav.rda\"))\n\nsf2 &lt;- as.ggplot(p_heatmap_terms_pav)\n\nggsave(\n    sf2, \n    file = here(\"products\", \"figs\", \"supplementary_figure2.pdf\"),\n    width = 10, height = 12\n)\n\nimage_read_pdf(here(\"products\", \"figs\", \"supplementary_figure2.pdf\")) |&gt;\n    image_write(\n        path = here(\"products\", \"figs\", \"supplementary_figure2.png\"),\n        density = 300\n    )\n\n#----Supplementary Figure S3----------------------------------------------------\n## Load data\nload(here(\"products\", \"plots\", \"p_bodypart_timeseries.rda\"))\nload(here(\"products\", \"plots\", \"p_layout_timeseries.rda\"))\nload(here(\"products\", \"plots\", \"p_seqtech_timeseries.rda\"))\n\n\n## Combine plots\nsf3 &lt;- wrap_plots(\n    p_bodypart_timeseries +\n        guides(color = guide_legend(ncol = 1)) +\n        theme(legend.position = \"right\"),\n    p_layout_timeseries + \n        guides(color = guide_legend(ncol = 1)) +\n        theme(legend.position = \"right\"),\n    p_seqtech_timeseries +\n        guides(color = guide_legend(ncol = 1)) +\n        theme(legend.position = \"right\"),\n    nrow = 3\n) +\n    plot_annotation(tag_levels = \"A\")\n\n\n## Save figure\nggsave(\n    sf3, \n    file = here(\"products\", \"figs\", \"supplementary_figure3.png\"),\n    width = 9, height = 11, dpi = 300\n)\n\nggsave(\n    sf2, \n    file = here(\"products\", \"figs\", \"supplementary_figure2.pdf\"),\n    width = 9, height = 11\n)",
    "crumbs": [
      "Appendices"
    ]
  },
  {
    "objectID": "chapters/appendices.html#creating-paper-tables",
    "href": "chapters/appendices.html#creating-paper-tables",
    "title": "Appendices",
    "section": "Creating paper tables",
    "text": "Creating paper tables\nBelow you can find the code used to create the tables in the paper.\n\nlibrary(here)\nlibrary(tidyverse)\nset.seed(123)\n\nload(here(\"data\", \"metadata_atlas_v2_downloaded.rda\"))\n\n#----Supplementary Table S1-----------------------------------------------------\n## Sequence QC stats\nload(here(\"products\", \"result_files\", \"fastp_stats.rda\"))\nsup_table1 &lt;- fastp_stats |&gt;\n    dplyr::rename(Run = Sample) |&gt;\n    left_join(\n        metadata_atlas_v2_downloaded |&gt;\n            select(BioSample, Run, BioProject)\n    ) |&gt;\n    dplyr::select(BioProject, BioSample, Run, 3:24)\n\nwrite_tsv(\n    sup_table1,\n    file = here(\"products\", \"tables\", \"supplementary_table_S1.tsv\")\n)\n\n#----Supplementary Table S2----------------------------------------------------\n## Mapping stats\nload(here(\"products\", \"result_files\", \"mapping_rate_salmon.rda\"))\n\nsup_table2 &lt;- metadata_atlas_v2_downloaded |&gt;\n    select(BioSample, BioProject) |&gt;\n    inner_join(mapping_rate)\n\nwrite_tsv(\n    sup_table2,\n    file = here(\"products\", \"tables\", \"supplementary_table_S2.tsv\")\n)",
    "crumbs": [
      "Appendices"
    ]
  }
]