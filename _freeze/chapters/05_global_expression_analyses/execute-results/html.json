{
  "hash": "2e07a194b5aff3c24fb261a33a1f4c77",
  "result": {
    "markdown": "---\nexecute: \n  eval: true\n  echo: true\n  warning: false\n---\n\n\n\n# Exploring global expression profiles\n\nHere, I will describe the code to:\n\n1. Classify genes into expression groups (null expression, weak expression,\nbroad expression, and part-specific expression).\n2. Perform functional analyses on part-specific tissues. \n3. Identify part-specific transcription factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(here)\nlibrary(arrow)\nlibrary(BioNERO)\nlibrary(tidyverse)\nlibrary(ComplexHeatmap)\nlibrary(patchwork)\nlibrary(clusterProfiler)\nlibrary(Biostrings)\nlibrary(planttfhunter)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Classifying genes by expression profiles\n\nIn this section, I will calculate the $\\tau$ index of tissue-specificity \nusing log-transformed TPM values. Then, I will use the $\\tau$ indices\nto classify genes into groups based on their expression profiles.\nFirst, let's define a function to calculate $\\tau$ for each gene.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' @param x A numeric vector with a gene's mean or median expression values\n#' across tissues\ncalculate_tau <- function(x) {\n    \n    tau <- NA\n    if(all(!is.na(x)) & min(x, na.rm = TRUE) >= 0) {\n        tau <- 0\n        if(max(x) != 0) {\n            x <- (1-(x / max(x, na.rm = TRUE)))\n            tau <- sum(x, na.rm = TRUE)\n            tau <- tau / (length(x) - 1)\n        }\n    }\n    \n    return(tau)\n}\n```\n:::\n\n\nNow, I will create an expression matrix with genes in row names and median\nexpression per body part in column. This is what we need to calculate $\\tau$.\nThe `parquet_dir` directory below was downloaded from the FigShare\nrepository associated with the publication [@sea_figshare].\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- open_dataset(\n    \"~/Documents/app_data/parquet_dir\"\n)\n\n# Body parts to use - exclude \"whole plant\" and \"unknown\"\nparts <- c(\n    \"root\", \"leaf\", \"shoot\", \"seedling\", \"seed\", \"cotyledon\", \"embryo\",\n    \"seed coat\", \"hypocotyl\", \"pod\", \"flower\", \"endosperm\", \"suspensor\",\n    \"nodule\", \"epicotyl\", \"radicle\", \"petiole\"\n)\n\n# Create a vector of all gene IDs and split it into a list of 100 vectors\nchunk <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))\n\ngenes <- db |>\n    select(Gene) |>\n    unique() |> \n    collect() |>\n    pull(Gene) |>\n    chunk(n = 100)\n\n\n# Get median expression per tissue\nmedian_per_part_long <- Reduce(rbind, lapply(seq_along(genes), function(x) {\n    message(\"Working on set \", x)\n    df <- db |>\n        select(Gene, Sample, TPM, Part) |>\n        filter(Part %in% parts) |>\n        filter(Gene %in% genes[[x]]) |>\n        group_by(Part, Gene) |>\n        summarise(\n            Median = median(TPM)\n        ) |>\n        ungroup() |>\n        collect()\n    \n    return(df)\n}))\n\nmedian_per_part <- pivot_wider(\n    median_per_part_long, names_from = Part, values_from = Median\n) |>\n    tibble::column_to_rownames(\"Gene\") |>\n    as.matrix()\n```\n:::\n\n\nBefore calculating $\\tau$, I will exclude genes that are not expressed in any\npart. Here, \"expressed genes\" will be considered genes with median TPM >=1\nin a body part.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove genes with median TPM <1 in all body parts\nremove <- apply(median_per_part, 1, function(x) all(x<1))\nfinal_median_per_part <- median_per_part[!remove, ]\n\n# Calculate Tau indices\ntau <- apply(log2(final_median_per_part + 1), 1, calculate_tau)\n```\n:::\n\n\nNow, I will classify genes into the following categories:\n\n1. **Null expression:** median TPM <1 in all tissues.\n2. **Weak expression:** median TPM <5 in all tissues.\n3. **Broadly expressed:** Tau <0.85.\n4. **Body part-specific:** Tau >=0.85.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a long data frame of genes and medians per tissue\ngenes_median <- reshape2::melt(median_per_part) |>\n    dplyr::rename(Gene = Var1, Part = Var2, Median = value)\n\n# Create a data frame of genes and tau\ngenes_tau <- data.frame(\n    Gene = names(tau),\n    Tau = as.numeric(tau)\n)\n\n# Classify genes\n## Classify genes into categories\nclassified_genes <- left_join(genes_median, genes_tau) |>\n    ## In how many parts is each gene expressed (TPM >1) and stably expressed (TPM >5)?\n    group_by(Gene) |>\n    mutate(\n        N_expressed = sum(Median > 1),\n        N_stable = sum(Median > 5)\n    ) |>\n    ## Classify genes\n    mutate(\n        Classification = case_when(\n            N_expressed == 0 ~ \"Null\",\n            N_stable == 0 ~ \"Weak\",\n            N_stable >= 1 & Tau < 0.85 ~ \"Broad\",\n            N_stable >= 1 & Tau >= 0.85 ~ \"Specific\"\n        )\n    ) |>\n    ungroup()\n    \n## In which parts are body part-specific genes specifically expressed?\nspecific_genes_and_parts <- classified_genes |>\n    filter(Classification == \"Specific\" & Median > 5) |>\n    group_by(Gene) |>\n    summarise(\n        Specific_parts = str_c(Part, collapse = \",\")\n    )\n    \n# Combine everything (classification + tissues) into a single data frame\nfinal_classified_genes <- classified_genes |>\n    select(Gene, Tau, Classification) |>\n    distinct(Gene, .keep_all = TRUE) |>\n    left_join(specific_genes_and_parts) |>\n    arrange(Classification, Gene)\n\n# Exploring classification visually\np_genes_per_group <- final_classified_genes |>\n    janitor::tabyl(Classification) |>\n    mutate(\n        Classification = factor(\n            Classification, levels = c(\"Null\", \"Weak\", \"Broad\", \"Specific\")\n        )\n    ) |>\n    ggplot(aes(x = n, y = Classification)) +\n    geom_bar(stat = \"identity\", fill = ggsci::pal_jama()(4)) +\n    geom_text(aes(label = n), hjust = -0.2) +\n    theme_minimal() +\n    labs(\n        title = \"Number of genes per expression category\",\n        x = \"# of genes\", y = \"\"\n    ) +\n    xlim(0, 35000)\n\np_genes_per_group\n```\n\n::: {.cell-output-display}\n![](05_global_expression_analyses_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNow, let's make an UpSet plot to see the patterns of body part specificity\nacross genes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list of body parts and their specific genes\nspecific_genes_list <- final_classified_genes |>\n    filter(!is.na(Specific_parts)) |>\n    select(Gene, Specific_parts) |>\n    mutate(Specific_parts = str_to_title(Specific_parts)) |>\n    separate_longer_delim(Specific_parts, delim = \",\") |>\n    as.data.frame()\n\nspecific_genes_list <- split(\n    specific_genes_list$Gene,\n    specific_genes_list$Specific_parts\n)\n\n# Create a combination matrix and filter it\ncomb_matrix <- make_comb_mat(specific_genes_list)\nsizes <- comb_size(comb_matrix)\nmat <- comb_matrix[sizes >= 10]\ndegree <- comb_degree(mat)\npalette <- ggsci::pal_npg()(length(unique(degree)))\n\np_upset <- UpSet(\n    mat,\n    comb_col = palette[degree],\n    top_annotation = upset_top_annotation(\n        mat, add_numbers = TRUE, numbers_rot = 45\n    )\n)\n\np_upset\n```\n\n::: {.cell-output-display}\n![](05_global_expression_analyses_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe can also plot a heatmap of median expression profiles per part for all\npart-specific genes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create expression matrix to plot with metadata\nts_genes <- final_classified_genes |>\n    filter(Classification == \"Specific\") |>\n    pull(Gene)\n\ncolnames(median_per_part) <- str_to_title(colnames(median_per_part))\nexp_matrix <- log2(median_per_part[ts_genes, ] + 1)\n\n# Plot median expression profiles with annotation per group\npal <- colorRampPalette(RColorBrewer::brewer.pal(9, \"Greens\"))(100)\np_heatmap_median <- ComplexHeatmap::pheatmap(\n    t(exp_matrix),\n    name = \"Log2 TPM\",\n    main = \"Median expression of body part-specific genes\",\n    show_rownames = TRUE,\n    show_colnames = FALSE,\n    color = pal\n)\n\np_heatmap_median\n```\n\n::: {.cell-output-display}\n![](05_global_expression_analyses_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Functional enrichment of part-specific genes\n\nHere, I will perform a functional enrichment analysis to find\noverrepresented GO terms, protein domains, and MapMan bins in the\nsets of part-specific genes. \n\nI will start by downloading and processing the functional annotation\ndata from PLAZA 5.0 Dicots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download functional annotation from PLAZA 5.0\nbase_url <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05\"\n\n## GO\ngo <- read_tsv(\n    file.path(base_url, \"GO/go.gma.csv.gz\"), skip = 8\n) \ngo <- list(\n    term2gene = go |> select(GO = go, Gene = `#gene_id`),\n    term2name = go |> select(GO = go, Description = description)\n)\n\n## InterPro domains\ninterpro <- read_tsv(\n    file.path(base_url, \"InterPro/interpro.gma.csv.gz\"), skip = 8\n) \ninterpro <- list(\n    term2gene = interpro |> select(InterPro = motif_id, Gene = `#gene_id`),\n    term2name = interpro |> select(InterPro = motif_id, Description = description)\n)\n\n## MapMan\nmapman <- read_tsv(\n    file.path(base_url, \"MapMan/mapman.gma.csv.gz\"), skip = 8\n) \nmapman <- list(\n    term2gene = mapman |> select(MapMan = mapman, Gene = gene_id),\n    term2name = mapman |> select(MapMan = mapman, Description = desc)\n)\n```\n:::\n\n\nNext, I will perform overrepresentation analyses for each set of\npart-specific genes (i.e,, elements of `specific_genes_list`).\nAs background, we will use all genes that are expressed in at\nleast one body part.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define background\nbackground <- final_classified_genes |>\n    filter(Classification != \"Null\") |>\n    pull(Gene) |> \n    unique()\n\n# Perform ORA\nenrich_results <- lapply(specific_genes_list, function(x) {\n    \n    go_enrich <- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = go$term2gene, TERM2NAME = go$term2name\n    )\n    \n    interpro_enrich <- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = interpro$term2gene, TERM2NAME = interpro$term2name\n    )\n    \n    mapman_enrich <- enricher(\n        x, universe = background,\n        qvalueCutoff = 0.05,\n        TERM2GENE = mapman$term2gene, TERM2NAME = mapman$term2name\n    )\n    \n    final_df <- rbind(\n        as.data.frame(go_enrich) |> mutate(Category = \"GO\"), \n        as.data.frame(interpro_enrich) |> mutate(Category = \"InterPro\"), \n        as.data.frame(mapman_enrich) |> mutate(Category = \"MapMan\")\n    )\n    return(final_df)\n})\n\n# Combine results into a single data frame\nenrichment_df <- Reduce(rbind, lapply(seq_along(enrich_results), function(x) {\n    \n    part <- names(enrich_results)[x]\n    df <- enrich_results[[x]]\n    df$Part <- part\n    \n    return(df)\n}))\n\nenrichment_df <- enrichment_df |>\n    filter(p.adjust <= 0.01)\n\nwrite_tsv(\n    enrichment_df, \n    file = here(\"products\", \"tables\", \"enrichment_df.tsv\")\n)\n```\n:::\n\n\nAfter a careful inspection of the enrichment results, I found the following\nenriched processes for each set of part-specific genes:\n\n1. **Cotyledon:** seed maturation, seed germination, long-chain \nfatty acid biosynthesis, gibberelin biosynthesis, proteinase inhibitors,\nlipoxygenase, cupin, lipid droplets, response to dessication, \noxylipin biosynthesis, diterpenoid biosynthesis, response to ABA.\n\n2. **Embryo:** seed maturation, seed germination, lipid droplet, response to\nABA, response to dessication, long-chain fatty acid biosynthesis,\nproteinase inhibitors, oxylipin biosynthesis, oleosin, cupin, chaperones.\n\n3. **Endosperm:** lipid transport, xyloglucan metabolism, hemicellulose \nmetabolism, lipid transfer protein, pectinesterase inhibitor, \nfructosidase inhibitor, invertase inhibitor, glycoside hydrolase 16,\nbeta-1,3-glucanase, defensin.\n\n4. **Epicotyl:** SAUR, arabinogalactan protein, FAS1 domain,\nmetallopeptidase, ubiquitin ligase, programmed cell death.\n\n5. **Flower:** pollen wall assembly, cell wall modification, \ncarboxylic ester hydrolase, floral identity, floral development,\nstamen development, androecium development, pollen tube development,\nmucilage pectin biosynthesis, pectate lyase, carpel development,\nfloral meristem determinancy, gynoecium development, cell tip growth,\nactin filament organization, anther wall tapetum development, \nplant ovule development, cytokinin catabolism, \nvery-long-chain 3-ketoacyl-CoA synthase, glycoside hydrolase 28,\nSWEET sugar transporter, thiolase, cutin synthase.\n\n6. **Hypocotyl:** peroxidase, haem peroxidase, cytochrome P450 superfamily,\nsugar transporter ERD6, iron binding, cupin.\n\n7. **Leaf:** chloroplast localization, terpene synthase, WEB family,\nproteinase inhibitor I3, glucose-1-phosphate adenylyltransferase,\nstarch metabolism.\n\n8. **Nodule:** peroxidase, leucine biosynthesis, MFS transporter superfamily,\nauxin biosynthesis, Nin-like superfamily, symbiosis signaling, germin.\n\n9. **Petiole:** NAD+ nucleosidase, diterpenoid biosynthesis, \nSAUR, growth factor activity, FAS1 domain, TIR domain, NB-ARC, \neffector-triggered immunity, cell wall organization.\n\n10. **Pod:** fruit ripening, glyoxylate metabolism, \nphosphatidylethanolamine-binding protein family, NB-ARC, \nphospholipid/glycerol acyltransferase, apoptotic protease-activating factors.\n\n11. **Radicle:** lipid storage, seed maturation, seed germination, anaerobic\nrespiration, seedling development, heat-shock protein, proteinase inhibitor,\nethylene insensitive 3 family, oleosin.\n\n12. **Root:** peroxidase, Casparian strip membrane protein, secondary cell wall,\ncell-cell junction assembly, phenylpropanoid biosynthesis, lignin metabolism,\nresponse to cytokinin, ABC transporter, cupin, laccase, lipid transfer protein,\nglycoside hydrolase 1, Fe(2+)-2OG dioxygenase, polyketide synthase, CAP domain,\nphytocyanin domain.\n\n13. **Seed:** seed germination, seed maturation, lipid storage, lipid droplets,\nproteinase inhibitor, protein storage, olylipin biosynthesis,\nlong-chain fatty acid biosynthesis, oleosin.\n\n14. **Seed coat:** seed coat development, flavonoid biosynthesis, \namine-lyase activity, xenobiotic transport, lignin catabolism, \nSWEET sugar transporter, defensin, glycoside hydrolase 27, expansin,\nproteinase inhibitor.\n\n15. **Seedling:** glyoxylate metabolism, peroxidase, cytochrome P450, \ncupin, lipid transfer protein, sugar/inosotil transporter,\nexpansin, FAD-linked oxidase.\n\n16. **Shoot:** terpene synthase, SAUR, metallopeptidase, WEB family,\nSPX family.\n\n17. **Suspensor:** root meristem growth, growth factor, defensin-like protein,\nlipid localization.\n\n\nTo summarize the results in a clearer way, let's visualize the biological \nprocesses associated with each part as a presence/absence heatmap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list of vectors with terms associated with each gene set\nterms_list <- list(\n    Cotyledon = c(\n        \"seed maturation\", \"seed germination\", \"gibberelin biosynthesis\",\n        \"long-chain fatty acid biosynthesis\", \"proteinase inhibitor\",\n        \"lipoxygenase\", \"cupin\", \"lipid droplets\", \"response to dessication\",\n        \"oxylipin biosynthesis\", \"diterpenoid biosynthesis\", \"response to ABA\"\n    ),\n    Embryo = c(\n        \"seed maturation\", \"seed germination\", \"lipid droplets\", \n        \"response to ABA\", \"long-chain fatty acid biosynthesis\",\n        \"proteinase inhibitor\", \"oxylipin biosynthesis\", \"oleosin\",\n        \"cupin\", \"chaperone\"\n    ),\n    Endosperm = c(\n        \"lipid transport\", \"xyloglucan metabolism\", \"hemicellulose metabolism\",\n        \"lipid transfer protein\", \n        \"pectinesterase inhibitor\", \n        \"invertase inhibitor\",\n        \"beta-1,3-glucanase\", \"defensin\"\n    ),\n    Epicotyl = c(\n        \"SAUR\", \"arabinogalactan protein\",\n        \"metallopeptidase\", \"programmed cell death\"\n    ),\n    Flower = c(\n        \"cell wall organization\", \"floral identity\", \n        \"stamen development\", \"androecium development\", \n        \"pollen tube development\", \"mucilage pectin biosynthesis\", \n        \"carpel development\", \n        \"gynoecium development\", \n        \"anther wall tapetum development\",\n        \"plant ovule development\", \"cytokinin catabolism\", \n        \"3-ketoacyl-CoA synthase\", \"glycoside hydrolase 28\",\n        \"SWEET sugar transporter\", \"thiolase\", \"cutin synthase\"\n    ),\n    Hypocotyl = c(\n        \"peroxidase\", \"haem peroxidase\", \"cytochrome P450\",\n        \"sugar transporter ERD6\", \"cupin\"\n    ),\n    Leaf = c(\n        \"chloroplast localization\", \"terpene synthase\", \"WEB family\",\n        \"proteinase inhibitor\", \"G1P adenylyltransferase\",\n        \"starch metabolism\"\n    ),\n    Nodule = c(\n        \"peroxidase\", \"leucine biosynthesis\", \"auxin biosynthesis\", \n        \"Nin-like superfamily\", \"symbiosis signaling\", \"germin\"\n    ),\n    Petiole = c(\n        \"diterpenoid biosynthesis\", \"SAUR\", \n        \"growth factor\", \"TIR domain\", \"NB-ARC\", \n        \"cell wall organization\"\n    ),\n    Pod = c(\n        \"fruit ripening\", \"glyoxylate metabolism\", \n        \"NB-ARC\",\n        \"phospholipid/glycerol acyltransferase\", \n        \"apoptotic protease-activating factors\"\n    ),\n    Radicle = c(\n        \"seed maturation\", \"seed germination\", \n        \"anaerobic respiration\", \"seedling development\", \"heat-shock protein\", \n        \"proteinase inhibitor\", \"ethylene insensitive 3 family\", \"oleosin\"\n    ),\n    Root = c(\n        \"peroxidase\", \"Casparian strip membrane protein\", \"secondary cell wall\",\n        \"cell-cell junction assembly\", \"phenylpropanoid biosynthesis\", \n        \"lignin metabolism\", \"response to cytokinin\", \"ABC transporter\", \n        \"cupin\", \"laccase\", \"lipid transfer protein\", \"glycoside hydrolase 1\",\n        \"Fe(2+)-2OG dioxygenase\", \"polyketide synthase\", \n        \"phytocyanin domain\"\n    ),\n    `Seed Coat` = c(\n        \"seed coat development\", \"flavonoid biosynthesis\", \n        \"lignin catabolism\", \n        \"SWEET sugar transporter\", \"defensin\", \"glycoside hydrolase 27\", \n        \"expansin\", \"proteinase inhibitor\"\n    ),\n    Seedling = c(\n        \"glyoxylate metabolism\", \"peroxidase\", \"cytochrome P450\", \n        \"cupin\", \"lipid transfer protein\", \"sugar/inosotil transporter\",\n        \"expansin\"\n    ),\n    Shoot = c(\n        \"terpene synthase\", \"SAUR\", \"metallopeptidase\", \"WEB family\"\n    ),\n    Suspensor = c(\n        \"root meristem growth\", \"growth factor\", \"defensin\",\n        \"lipid localization\"\n    )\n) \n\n# Create a binary (i.e., presence/absence) matrix from list\npam <- ComplexHeatmap::list_to_matrix(terms_list)\n\n# Plot heatmap\np_heatmap_terms_pav <- ComplexHeatmap::pheatmap(\n    pam, color = c(\"grey90\", \"grey10\"),\n    border_color = \"white\",\n    name = \"Presence/Absence\",\n    main = \"Enriched terms for part-specific genes\",\n    fontsize_row = 9,\n    breaks = c(0, 0.5, 1),\n    legend_breaks = c(0, 1)\n)\n\n# Change height and width of the column and row dendrograms, respectively\np_heatmap_terms_pav@row_dend_param$width <- unit(5, \"mm\")\np_heatmap_terms_pav@column_dend_param$height <- unit(5, \"mm\")\n\np_heatmap_terms_pav\n```\n\n::: {.cell-output-display}\n![](05_global_expression_analyses_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Identifying part-specific transcription factors\n\nLastly, I will identify transcription factors among part-specific genes \nand explore their families to find the putative regulators of each part's\ntranscriptional programs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get TF list from PlantTFDB\ngma_tfs <- read_tsv(\n    \"http://planttfdb.gao-lab.org/download/TF_list/Gma_TF_list.txt.gz\"\n) |>\n    select(Gene = Gene_ID, Family) |>\n    distinct(Gene, .keep_all = TRUE)\n    \n# Count number of TFs per family among part-specific genes\ntf_counts <- inner_join(\n    final_classified_genes |> dplyr::filter(Classification == \"Specific\"),\n    gma_tfs\n) |>\n    select(Gene, Family, Specific_parts) |>\n    mutate(Specific_parts = str_to_title(Specific_parts)) |>\n    separate_longer_delim(Specific_parts, delim = \",\") |>\n    group_by(Specific_parts) |>\n    count(Family, .drop = FALSE) |>\n    pivot_wider(names_from = Family, values_from = n) |>\n    tibble::column_to_rownames(\"Specific_parts\") |>\n    as.matrix()\n    \ntf_counts[is.na(tf_counts)] <- 0\n\n# Plot heatmap\npal <- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\"))(100)[1:70]\np_heatmap_specific_tfs <- ComplexHeatmap::pheatmap(\n    log2(tf_counts + 1),\n    color = pal,\n    display_numbers = tf_counts,\n    border_color = \"gray90\",\n    name = \"Log2 counts\",\n    main = \"Transcription factors among part-specific genes\"\n)\n\np_heatmap_specific_tfs\n```\n\n::: {.cell-output-display}\n![](05_global_expression_analyses_files/figure-html/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\nTo wrap it all up, I will save the objects with plots and important results \nto files, so that they can be easily explored later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(\n    median_per_part, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"median_per_part.rda\")\n)\n\nsave(\n    final_classified_genes, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"final_classified_genes.rda\")\n)\n\nsave(\n    enrichment_df, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"enrichment_df.rda\")\n)\n\nsave(\n    p_genes_per_group, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_genes_per_group.rda\")\n)\n\nsave(\n    p_upset, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset.rda\")\n)\n\nsave(\n    p_heatmap_median, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_median.rda\")\n)\n\nsave(\n    p_heatmap_terms_pav, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_terms_pav.rda\")\n)\n\nsave(\n    p_heatmap_specific_tfs, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_heatmap_specific_tfs.rda\")\n)\n```\n:::\n\n\n\n## Session information {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.0)\n aplot                  0.1.10    2023-03-08 [1] CRAN (R 4.3.0)\n arrow                * 11.0.0.3  2023-03-08 [1] CRAN (R 4.3.0)\n assertthat             0.2.1     2019-03-21 [1] CRAN (R 4.3.0)\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase                2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BioNERO              * 1.9.3     2023-06-20 [1] Github (almeidasilvaf/BioNERO@cd9bec2)\n Biostrings           * 2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n clusterProfiler      * 4.8.1     2023-05-03 [1] Bioconductor\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap       * 2.16.0    2023-04-25 [1] Bioconductor\n cowplot                1.1.1     2020-12-30 [1] CRAN (R 4.3.0)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.31    2022-12-11 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n DOSE                   3.26.1    2023-05-03 [1] Bioconductor\n downloader             0.4       2015-07-09 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n enrichplot             1.20.0    2023-04-25 [1] Bioconductor\n evaluate               0.20      2023-01-17 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n fastmatch              1.1-3     2021-07-23 [1] CRAN (R 4.3.0)\n fgsea                  1.26.0    2023-04-25 [1] Bioconductor\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges          1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggforce                0.4.1     2022-10-04 [1] CRAN (R 4.3.0)\n ggfun                  0.0.9     2022-11-21 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggplotify              0.1.0     2021-09-02 [1] CRAN (R 4.3.0)\n ggraph                 2.1.0     2022-10-09 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.0)\n ggtree                 3.8.0     2023-04-25 [1] Bioconductor\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n GOSemSim               2.26.0    2023-04-25 [1] Bioconductor\n graphlayouts           1.0.0     2023-05-01 [1] CRAN (R 4.3.0)\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.0)\n gson                   0.1.0     2023-03-07 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n HDO.db                 0.99.1    2023-06-20 [1] Bioconductor\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n janitor                2.2.0     2023-02-02 [1] CRAN (R 4.3.0)\n jsonlite               1.8.4     2022-12-06 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.42      2023-01-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics         1.12.2    2023-06-09 [1] Bioconductor\n matrixStats            1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork            * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n planttfhunter        * 0.99.2    2023-06-21 [1] Github (almeidasilvaf/planttfhunter@6fb8551)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n polyclip               1.10-4    2022-10-20 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n qvalue                 2.32.0    2023-04-25 [1] Bioconductor\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.21      2023-03-26 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n scatterpie             0.2.1     2023-06-07 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shadowtext             0.1.2     2022-04-22 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n snakecase              0.11.0    2019-05-25 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment   1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidygraph              1.2.3     2023-02-01 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidytree               0.4.2     2022-12-18 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n treeio                 1.24.1    2023-05-31 [1] Bioconductor\n tweenr                 2.0.2     2022-09-06 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.2     2023-04-19 [1] CRAN (R 4.3.0)\n viridis                0.6.2     2021-10-13 [1] CRAN (R 4.3.0)\n viridisLite            0.4.2     2023-05-02 [1] CRAN (R 4.3.0)\n vroom                  1.6.3     2023-04-28 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector              * 0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n yulab.utils            0.0.6     2022-12-20 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n\n",
    "supporting": [
      "05_global_expression_analyses_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}