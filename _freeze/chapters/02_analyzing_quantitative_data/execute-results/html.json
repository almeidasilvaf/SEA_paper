{
  "hash": "55e93f5154330b1dddddb766a613f581",
  "result": {
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Analyzing quantitative data\n\nHere, I will describe the code to:\n\n1. Read and parse quantitative data from __salmon__ output files.\n2. Perform dimensionality reduction with UMAP and t-SNE.\n\nFirst of all, let's load required packages and data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load packages\nlibrary(here)\nlibrary(bears)\nlibrary(GenomicFeatures)\nlibrary(SummarizedExperiment)\nlibrary(SingleCellExperiment)\nlibrary(scater)\nlibrary(scran)\nlibrary(DESeq2)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nload(here(\"data\", \"ds.rda\"))\nfinal_metadata <- read.csv(\n    here(\"products\", \"tables\", \"final_metadata_classified_atlas_v2.tsv\"),\n    header = TRUE, sep = \"\\t\"\n) |>\n    dplyr::select(-c(Run, Experiment))\n```\n:::\n\n\n## From salmon `quant.sf` files to `SummarizedExperiment`\n\nHere, we will obtain a `SummarizedExperiment` object containing gene-level\ntranscript abundances in TPM and bias-corrected counts. Counts will be obtained\nusing the \"bias correction without an offset\" method from the Bioconductor\npackage `tximport`.\n\nTo create the `SummarizedExperiment` object, we will need a 2-column\ndata frame of transcript-to-gene mapping. Let's create it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame of transcript-to-gene mapping\ntx <- Biostrings::readDNAStringSet(\n    here(\"data\", \"gmax_transcriptome.fa.gz\")\n)\ntx2gene <- data.frame(\n    TXNAME = gsub(\" \\\\|.*\", \"\", names(tx)),\n    GENEID = gsub(\".*\\\\| \", \"\", names(tx))\n)\n\nsave(\n    tx2gene, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"tx2gene.rda\")\n)\n```\n:::\n\n\nNow, we can get the `SummarizedExperiment` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get gene-level transcript abundance estimates from salmon\n## \"Bias correction without an offset\" method\nse_atlas_gene <- salmon2se(\n    final_metadata,\n    level = \"gene\",\n    salmondir = ds$salmondir,\n    tx2gene = tx2gene\n)\nassay(se_atlas_gene, \"gene_counts\") <- round(\n    assay(se_atlas_gene, \"gene_counts\") \n)\n\n## \"Original counts and offset\" method\nfiles <- file.path(ds$salmondir, final_metadata$BioSample, \"quant.sf\")\nse_atlas_gene_offset <- tximport::tximport(\n    files, type = \"salmon\", tx2gene = tx2gene\n)\ncolnames(se_atlas_gene_offset$abundance) <- final_metadata$BioSample\ncolnames(se_atlas_gene_offset$counts) <- final_metadata$BioSample\ncolnames(se_atlas_gene_offset$length) <- final_metadata$BioSample\n\n# Get transcript-level transcript abundance estimates from salmon\nse_atlas_transcript <- salmon2se(\n    final_metadata,\n    level = \"transcript\",\n    salmondir = ds$salmondir\n)\n\n# Save gene-level and transcript-level\nsave(\n    se_atlas_gene, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_gene.rda\")\n)\n\nsave(\n    se_atlas_gene_offset, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_gene_offset.rda\")\n)\n\nsave(\n    se_atlas_transcript, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"se_atlas_transcript.rda\")\n)\n\n# Save final and complete sample metadata data frame\nsample_metadata_complete <- as.data.frame(colData(se_atlas_gene))\n\nsave(\n    sample_metadata_complete, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"sample_metadata_complete.rda\")\n)\n```\n:::\n\n\n## Dimensionality reduction\n\nNow, we will perform dimensionality reduction on highly variable genes \nwith PCA, t-SNE, and UMAP. To increase speed and avoid noise, we will\nuse the PCs computed with the PCA as input to t-SNE and UMAP.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load SummarizedExperiment object containing counts per gene\nload(here(\"products\", \"result_files\", \"se_atlas_gene.rda\"))\n```\n:::\n\n\n### Feature selection\n\nTo maximize biological signal and reduce noise, we will only use highly\nvariable genes for dimensionality reduction. Here, we will pick the top 5000\nof genes with the highest biological components.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a SingleCellExperiment with counts and log-normalized counts\natlas_counts_sce <- SingleCellExperiment(\n    assays = list(\n        counts = assay(se_atlas_gene, \"gene_counts\"),\n        logcounts = log2(assay(se_atlas_gene, \"gene_counts\") + 1)\n    ), \n    colData = colData(se_atlas_gene)\n)\n\n# Modeling the mean-variance relationship and visualizing the fit\nmean_var_model <- modelGeneVar(atlas_counts_sce)\nfit_mean_var <- metadata(mean_var_model)\n\np_fit_mean_var <- data.frame(\n    mean = fit_mean_var$mean,\n    var = fit_mean_var$var,\n    trend = fit_mean_var$trend(fit_mean_var$mean)\n) |>\n    ggplot(aes(x = mean, y = var)) +\n    geom_point(alpha = 0.4) +\n    geom_line(aes(y = trend), color = \"steelblue3\", linewidth = 1.5) +\n    labs(\n        title = \"Per-gene mean-variance relationship\",\n        subtitle = \"Counts were normalized by library size and log-transformed\",\n        x = \"Mean of log-expression\", y = \"Variance of log-expression\"\n    ) +\n    theme_minimal()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_fit_mean_var\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the top 5000 of genes with the highest biological components\nhvg <- getTopHVGs(mean_var_model, n = 5000)\n```\n:::\n\n\nThe object `hvg` is a character vector containing the IDs of the \ntop 5000 genes with the highest biological components.  \n\n### Principal components analysis (PCA)\n\nNow, we will perform PCA using the genes in `hvg`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform PCA\natlas_counts_sce <- fixedPCA(\n    atlas_counts_sce, subset.row = hvg\n)\n\n# Plot proportion of variance explained by each PC\npercent_var <- attr(reducedDim(atlas_counts_sce), \"percentVar\")\n\np_pca_percent_var <- data.frame(\n    Variance = round(percent_var, 2),\n    PC = factor(1:50, levels = 1:50)\n) |>\n    ggplot(aes(x = PC, y = Variance)) +\n    geom_col(fill = \"grey40\") +\n    geom_text(aes(label = Variance), hjust = -0.3) +\n    labs(\n        title = \"Proportion of variance explained by each PC\",\n        x = \"PC\", y = \"Variance explained (%)\"\n    ) +\n    coord_flip() +\n    theme_minimal() +\n    ylim(0, 60)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_pca_percent_var\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n\nBased on the plot, we will use only the top 8 PCs for t-SNE and UMAP.\n\n### *t*-stochastic neighbor embedding (t-SNE)\n\nNow, we will perform dimensionality reduction with t-SNE using the top 8 PCs\nobtained previously. We will first test running a t-SNE with 6 different\nperplexity values: 10, 20, 30, 40, 50, 60. Then, we will select the best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get and plot t-SNE coordinates (perplexity = 10, 20, 30, 40, 50)\nperplexities <- c(10, 20, 30, 40, 50, 60)\np_tsne <- lapply(perplexities, function(x) {\n    \n    tsne_coord <- runTSNE(\n        atlas_counts_sce, perplexity = x,\n        dimred = \"PCA\", n_dimred = 8\n    )\n    \n    # Color by the variable \"Part\"\n    p <- plotReducedDim(tsne_coord, dimred = \"TSNE\", colour_by = \"Part\") +\n        labs(\n            x = \"t-SNE 1\", y = \"t-SNE 2\",\n            title = paste0(\"Perplexity = \", x)\n        )\n    \n    return(p)\n})\n\n# Visualize all plots\np_tsne_all_perplexities_panel <- wrap_plots(p_tsne, nrow = 2) +\n    plot_layout(guides = \"collect\") &\n    ggsci::scale_color_d3(\"category20\") &\n    labs(color = \"Part\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_tsne_all_perplexities_panel\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n:::\n\n\nBased on the plots, we chose `perplexity = 60` as the best option. Now, let's\ncreate an object containing only the plot for this perplexity value and\ngive it a better title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot t-SNE with perplexity = 60\np_tsne_optimal_perplexity <- p_tsne_all_perplexities_panel[[6]] +\n    labs(\n        title = \"t-SNE plot of all samples in the SEA 2.0\",\n        subtitle = \"Coordinates were constructed from the top 8 principal components, with perplexity = 60\"\n    )\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_tsne_optimal_perplexity\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### Uniform manifold approximation and projection (UMAP)\n\nLastly, we will perform dimensionality reduction with UMAP using the\ntop 8 PCs identified before. Similarly to what we did for t-SNE, we will\nrun UMAP with 6 different values for the \"number of neighbors\" parameter:\n10, 20, 30, 40, 50, and 60. Then, we will look at each plot to choose\nthe best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run UMAP with n_neighbors = 10, 20, 30, 40, 50\nn_neighbors <- c(10, 20, 30, 40, 50, 60)\np_umap <- lapply(n_neighbors, function(x) {\n    \n    umap_coord <- runUMAP(\n        atlas_counts_sce, n_neighbors = x,\n        dimred = \"PCA\", n_dimred = 8\n    )\n    \n    # Color by the variable \"Part\"\n    p <- plotReducedDim(umap_coord, dimred = \"UMAP\", colour_by = \"Part\") +\n        labs(\n            x = \"UMAP 1\", y = \"UMAP 2\",\n            title = paste0(\"Number of nearest neighbors = \", x)\n        )\n    \n    return(p)\n})\n\n# Visualize all plots\np_umap_all_nneighbors_panel <- wrap_plots(p_umap, nrow = 2) +\n    plot_layout(guides = \"collect\") &\n    ggsci::scale_color_d3(\"category20\") &\n    labs(color = \"Part\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_umap_all_nneighbors_panel\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-21-1.png){width=1152}\n:::\n:::\n\n\nBased on the plots, we chose `n_neighbors = 30` as the best option. Now, let's\ncreate an object containing the final plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot UMAP with n_neighbors = 30\np_umap_optimal_nneighbors <- p_umap_all_nneighbors_panel[[3]] +\n    labs(\n        title = \"UMAP plot of all samples in the SEA 2.0\",\n        subtitle = \"Coordinates were constructed from the top 8 principal components, with n_neighbors = 30\"\n    )\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_umap_optimal_nneighbors\n```\n\n::: {.cell-output-display}\n![](02_analyzing_quantitative_data_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Session info {.unnumbered}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-06-23\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n AnnotationDbi        * 1.62.0    2023-04-25 [1] Bioconductor\n beachmat               2.16.0    2023-04-25 [1] Bioconductor\n bears                * 0.99.0    2023-06-23 [1] Github (almeidasilvaf/bears@2dbba3d)\n beeswarm               0.4.0     2021-06-01 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocFileCache          2.8.0     2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocIO                 1.10.0    2023-04-25 [1] Bioconductor\n BiocNeighbors          1.18.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocSingular           1.16.0    2023-04-25 [1] Bioconductor\n biomaRt                2.56.0    2023-04-25 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n bluster                1.10.0    2023-04-25 [1] Bioconductor\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n dbplyr                 2.3.2     2023-03-21 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n DelayedMatrixStats     1.22.1    2023-06-09 [1] Bioconductor\n DESeq2               * 1.40.1    2023-05-02 [1] Bioconductor\n digest                 0.6.31    2022-12-11 [1] CRAN (R 4.3.0)\n downloader             0.4       2015-07-09 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dqrng                  0.3.0     2021-05-01 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.20      2023-01-17 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n filelock               1.0.2     2018-10-05 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n fs                     1.6.2     2023-04-25 [1] CRAN (R 4.3.0)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicAlignments      1.36.0    2023-04-25 [1] Bioconductor\n GenomicFeatures      * 1.52.0    2023-04-25 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n ggbeeswarm             0.7.2     2023-04-29 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n irlba                  2.3.5.1   2022-10-03 [1] CRAN (R 4.3.0)\n jsonlite               1.8.4     2022-12-06 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.42      2023-01-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n metapod                1.8.0     2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n patchwork            * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits            1.1.1     2020-01-24 [1] CRAN (R 4.3.0)\n progress               1.2.2     2019-05-16 [1] CRAN (R 4.3.0)\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n rentrez                1.2.3     2020-11-10 [1] CRAN (R 4.3.0)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.21      2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n Rsamtools              2.16.0    2023-04-25 [1] Bioconductor\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n Rsubread               2.14.2    2023-05-22 [1] Bioconductor\n rsvd                   1.0.5     2021-04-16 [1] CRAN (R 4.3.0)\n rtracklayer            1.60.0    2023-04-25 [1] Bioconductor\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n ScaledMatrix           1.8.1     2023-05-03 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n scater               * 1.28.0    2023-04-25 [1] Bioconductor\n scran                * 1.28.1    2023-05-02 [1] Bioconductor\n scuttle              * 1.10.1    2023-05-02 [1] Bioconductor\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n SingleCellExperiment * 1.22.0    2023-04-25 [1] Bioconductor\n sparseMatrixStats      1.12.1    2023-06-20 [1] Bioconductor\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tximport               1.28.0    2023-04-25 [1] Bioconductor\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.2     2023-04-19 [1] CRAN (R 4.3.0)\n vipor                  0.4.5     2017-03-22 [1] CRAN (R 4.3.0)\n viridis                0.6.2     2021-10-13 [1] CRAN (R 4.3.0)\n viridisLite            0.4.2     2023-05-02 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xml2                   1.3.4     2023-04-27 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "02_analyzing_quantitative_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}